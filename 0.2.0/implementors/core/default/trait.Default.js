(function() {var implementors = {};
implementors["riddle_common"] = [{"text":"impl&lt;T:&nbsp;<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"struct\" href=\"riddle_common/eventpub/struct.EventPub.html\" title=\"struct riddle_common::eventpub::EventPub\">EventPub</a>&lt;T&gt;","synthetic":false,"types":["riddle_common::eventpub::EventPub"]},{"text":"impl&lt;T:&nbsp;<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"struct\" href=\"riddle_common/eventpub/struct.EventSub.html\" title=\"struct riddle_common::eventpub::EventSub\">EventSub</a>&lt;T&gt;","synthetic":false,"types":["riddle_common::eventpub::EventSub"]}];
implementors["riddle_math"] = [{"text":"impl&lt;T:&nbsp;<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"struct\" href=\"riddle_math/struct.Vector2.html\" title=\"struct riddle_math::Vector2\">Vector2</a>&lt;T&gt;","synthetic":false,"types":["riddle_math::vector::Vector2"]}];
implementors["riddle_platform_common"] = [{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"struct\" href=\"riddle_platform_common/struct.LogicalPosition.html\" title=\"struct riddle_platform_common::LogicalPosition\">LogicalPosition</a>","synthetic":false,"types":["riddle_platform_common::dimensions::LogicalPosition"]}];
implementors["riddle_platform_winit"] = [{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"struct\" href=\"riddle_platform_winit/struct.WindowBuilder.html\" title=\"struct riddle_platform_winit::WindowBuilder\">WindowBuilder</a>","synthetic":false,"types":["riddle_platform_winit::window::WindowBuilder"]}];
implementors["riddle_renderer_wgpu"] = [{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"struct\" href=\"riddle_renderer_wgpu/struct.SpriteRenderCommand.html\" title=\"struct riddle_renderer_wgpu::SpriteRenderCommand\">SpriteRenderCommand</a>","synthetic":false,"types":["riddle_renderer_wgpu::sprite_utils::SpriteRenderCommand"]},{"text":"impl&lt;'a, Device&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"struct\" href=\"riddle_renderer_wgpu/wgpu_ext/struct.WGPUSpriteAtlasBuilder.html\" title=\"struct riddle_renderer_wgpu::wgpu_ext::WGPUSpriteAtlasBuilder\">WGPUSpriteAtlasBuilder</a>&lt;'a, Device&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Device: <a class=\"trait\" href=\"riddle_renderer_wgpu/wgpu_ext/trait.WGPUDevice.html\" title=\"trait riddle_renderer_wgpu::wgpu_ext::WGPUDevice\">WGPUDevice</a>,&nbsp;</span>","synthetic":false,"types":["riddle_renderer_wgpu::wgpu_ext::sprite_atlas::WGPUSpriteAtlasBuilder"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"enum\" href=\"riddle_renderer_wgpu/wgpu_ext/enum.FilterMode.html\" title=\"enum riddle_renderer_wgpu::wgpu_ext::FilterMode\">FilterMode</a>","synthetic":false,"types":["riddle_renderer_wgpu::wgpu_ext::texture::FilterMode"]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()