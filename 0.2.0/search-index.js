var searchIndex = JSON.parse('{\
"riddle":{"doc":"About Riddle","i":[[3,"RiddleContext","riddle","Riddle main thread context. It can be accessed before the …",null,null],[4,"RiddleError","","",null,null],[13,"AudioError","","",0,null],[13,"FontError","","",0,null],[13,"ImageError","","",0,null],[13,"InputError","","",0,null],[13,"RendererError","","",0,null],[13,"WindowError","","",0,null],[4,"Event","","",null,null],[13,"Platform","","",1,null],[13,"Input","","",1,null],[13,"PreRunPlaceholder","","",1,null],[13,"ProcessFrame","","",1,null],[3,"RiddleLib","","Riddle library initializer",null,null],[3,"RiddleState","","Riddle subsystem state handles",null,null],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",0,[[["audioerror",4]]]],[11,"from","","",0,[[["fonterror",4]]]],[11,"from","","",0,[[["imageerror",4]]]],[11,"from","","",0,[[["inputerror",4]]]],[11,"from","","",0,[[["renderererror",4]]]],[11,"from","","",0,[[["platformerror",4]]]],[11,"clone","","",4,[[],["riddlestate",3]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"borrow","","",2,[[],["platformcontext",3]]],[11,"source","","",0,[[],[["option",4],["error",8]]]],[11,"quit","","Issue a quit request. The main loop will terminate once …",2,[[]]],[11,"event","","Get the event associated with this context.",2,[[],["event",4]]],[11,"state","","The Riddle state, allowing systems to be queried.",2,[[],["riddlestate",3]]],[11,"audio","","The audio system.",2,[[],["audiosystem",3]]],[11,"input","","The input system.",2,[[],["inputsystem",3]]],[11,"time","","The time system.",2,[[],["timesystem",3]]],[11,"platform","","The platform system.",2,[[],["platformsystem",3]]],[11,"new","","Initialize Riddle. All available subsystems will be …",3,[[],[["result",4],["riddleerror",4]]]],[11,"run","","Begin the main event loop of the program.",3,[[]]],[11,"run_with_err","","Begin the main event loop of the program, with an Error …",3,[[]]],[11,"context","","Get a [<code>RiddleContext</code>] during program initialization, …",3,[[],["riddlecontext",3]]],[11,"state","","The system state which is thread safe, and which can be …",3,[[],["riddlestate",3]]],[11,"platform","","Platform system state",4,[[],["platformsystem",3]]],[11,"input","","Input system state",4,[[],["inputsystem",3]]],[11,"time","","Time system state",4,[[],["timesystem",3]]],[11,"audio","","Audio system state",4,[[],["audiosystem",3]]]],"p":[[4,"RiddleError"],[4,"Event"],[3,"RiddleContext"],[3,"RiddleLib"],[3,"RiddleState"]]},\
"riddle_audio":{"doc":"Riddle crate for loading and playing audio data.","i":[[0,"ext","riddle_audio","Types which are needed to use the audio system …",null,null],[8,"AudioSystemExt","riddle_audio::ext","",null,null],[10,"new_shared","","Create the audio system, connected to the default audio …",0,[[],[["result",4],["audioerror",4]]]],[10,"process_frame","","Update the system’s state.",0,[[]]],[3,"AudioSystem","riddle_audio","The Riddle audio system core state.",null,null],[3,"AudioSystemHandle","","",null,null],[3,"AudioSystemWeak","","",null,null],[3,"AudioMainThreadState","","",null,null],[3,"Clip","","Stores the raw data of an audio file.",null,null],[4,"ClipFormat","","The set of support audio file formats which [<code>Clip</code>] can …",null,null],[13,"Wav","","",1,null],[13,"Vorbis","","",1,null],[3,"ClipPlayer","","Handles playback of a [<code>Clip</code>] with support for pausing, …",null,null],[4,"PlayMode","","Enum describing what the player should do at the end of …",null,null],[13,"OneShot","","Stop playing at the end of the clip",2,null],[13,"Loop","","Return to the beginning of the clip and play it again",2,null],[3,"ClipPlayerBuilder","","Builder for [<code>ClipPlayer</code>]",null,null],[4,"AudioError","","",null,null],[13,"InitFailed","","",3,null],[12,"cause","riddle_audio::AudioError","",4,null],[13,"PlayError","riddle_audio","",3,null],[12,"cause","riddle_audio::AudioError","",5,null],[13,"ClipDecodeError","riddle_audio","",3,null],[13,"CommonError","","",3,null],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_string","","",3,[[],["string",3]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"new_shared","","",6,[[],[["result",4],["audioerror",4]]]],[11,"process_frame","","",6,[[]]],[11,"from","","",3,[[["commonerror",4]]]],[11,"from","","",3,[[["error",3]]]],[11,"clone","","",7,[[],["audiosystemhandle",3]]],[11,"clone","","",8,[[],["audiosystemweak",3]]],[11,"clone","","",10,[[],["clip",3]]],[11,"clone","","",1,[[],["clipformat",4]]],[11,"clone","","",2,[[],["playmode",4]]],[11,"eq","","",1,[[["clipformat",4]],["bool",15]]],[11,"deref","","",7,[[],["audiosystem",3]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"source","","",3,[[],[["error",8],["option",4]]]],[11,"clone_handle","","",6,[[],["audiosystemhandle",3]]],[11,"clone_weak_handle","","",6,[[],["audiosystemweak",3]]],[11,"downgrade","","Downgrade this handle to a weak handle",7,[[["audiosystemhandle",3]],["audiosystemweak",3]]],[11,"eq","","Test whether two handles point to the same location in …",7,[[["audiosystemhandle",3]],["bool",15]]],[11,"upgrade","","Upgrade a weak handle to a strong handle. Returns None if …",8,[[["audiosystemweak",3]],[["audiosystemhandle",3],["option",4]]]],[11,"load","","Reads the entirety of the data reader in to memory.",10,[[["clipformat",4]],[["audioerror",4],["result",4],["clip",3]]]],[11,"load_async","","Reads the entirety of the data reader in to memory, …",10,[[["clipformat",4]]]],[11,"duration","","Get the run time of the clip, if it can be determined.",10,[[],[["option",4],["duration",3]]]],[11,"fade_volume","","Fade the volume from the current volume to the targat …",11,[[["f32",15],["duration",3]]]],[11,"set_volume","","Set the volume of playback immediately.",11,[[["f32",15]]]],[11,"get_nominal_volume","","Get the nominal volume of the player, which may not match …",11,[[],["f32",15]]],[11,"get_observed_volume","","Get the observed volume of the player, which is always …",11,[[],["f32",15]]],[11,"pause","","Pauses playback of the clip.",11,[[]]],[11,"resume","","Example",11,[[]]],[11,"stop","","Stops playback.",11,[[]]],[11,"new","","Make a new builder.",12,[[["audiosystem",3]]]],[11,"with_mode","","Set the playback mode of the player. Defaults to […",12,[[["playmode",4]]]],[11,"with_volume","","Set the playback volume of the player. Defaults to 1.0.",12,[[["f32",15]]]],[11,"play","","Build the ClipPlayer, and start playing the clip …",12,[[["clip",3]],[["result",4],["clipplayer",3],["audioerror",4]]]],[11,"paused","","Build the ClipPlayer in the paused state. […",12,[[["clip",3]],[["result",4],["clipplayer",3],["audioerror",4]]]]],"p":[[8,"AudioSystemExt"],[4,"ClipFormat"],[4,"PlayMode"],[4,"AudioError"],[13,"InitFailed"],[13,"PlayError"],[3,"AudioSystem"],[3,"AudioSystemHandle"],[3,"AudioSystemWeak"],[3,"AudioMainThreadState"],[3,"Clip"],[3,"ClipPlayer"],[3,"ClipPlayerBuilder"]]},\
"riddle_common":{"doc":"Riddle crate with miscelanious support functionality …","i":[[0,"eventpub","riddle_common","An event pubsub utility.",null,null],[3,"EventPub","riddle_common::eventpub","Event publisher which can have multiple subscribers.",null,null],[11,"new","","Create a new event publisher.",0,[[]]],[11,"attach","","Attach a subscriber to the publisher.",0,[[["eventsub",3]]]],[11,"dispatch","","Send an event to all currently registered subscribers.",0,[[]]],[11,"subscription_count","","The current count of attached subscribers.",0,[[],["u32",15]]],[3,"EventSub","","An event subscriber which can filter incoming messages.",null,null],[11,"new","","Create a new EventSub which accepts all events",1,[[]]],[11,"new_with_filter","","Create a new EventSub which applies a filter on incoming …",1,[[]]],[11,"collect","","Return all received events and clear the subscribers …",1,[[],["vec",3]]],[8,"CloneHandle","riddle_common","Trait for objects that contain a weak reference to …",null,null],[16,"Handle","","The type which represents a strong reference, and which …",2,null],[16,"WeakHandle","","The type which represents a weak reference.",2,null],[10,"clone_handle","","Clone a strong handle to the object.",2,[[]]],[10,"clone_weak_handle","","Clone a weak handle to the object.",2,[[]]],[8,"ColorElement","","A type that represents a single channel in a color value.",null,null],[18,"ZERO","","",3,null],[18,"SATURATED","","",3,null],[8,"ColorElementConversion","","Define the mapping between two ColorElement types.",null,null],[10,"convert","","Given a value that implements this trait, produce an …",4,[[]]],[3,"Color","","An RGBA color, parameterized over color channel type.",null,null],[12,"r","","Red",5,null],[12,"g","","Green",5,null],[12,"b","","Blue",5,null],[12,"a","","Alpha",5,null],[4,"CommonError","","Errors common to many riddle crates",null,null],[13,"IOError","","",6,null],[13,"Common","","",6,null],[14,"define_handles","","Implement CloneHandle trait and define handle types for a …",null,null],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_string","","",6,[[],["string",3]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","riddle_common::eventpub","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"convert","riddle_common","",5,[[],["color",3]]],[11,"from","","",5,[[]]],[11,"from","","",5,[[]]],[11,"from","","",6,[[["error",8],["box",3]]]],[11,"clone","","",5,[[],["color",3]]],[11,"default","riddle_common::eventpub","",0,[[]]],[11,"default","","",1,[[]]],[11,"eq","riddle_common","",5,[[],["bool",15]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"source","","",6,[[],[["option",4],["error",8]]]],[18,"ZERO","","",3,null],[18,"SATURATED","","",3,null],[18,"RED","","Opaque primary red",5,null],[18,"GREEN","","Opaque primary green",5,null],[18,"BLUE","","Opaque primary blue",5,null],[18,"BLACK","","Opaque black",5,null],[18,"WHITE","","Opaque white",5,null],[18,"TRANSPARENT_BLACK","","Transparent black",5,null],[18,"ZERO","","Transparent black",5,null],[11,"rgba","","Example",5,[[]]],[11,"rgb","","Example",5,[[]]]],"p":[[3,"EventPub"],[3,"EventSub"],[8,"CloneHandle"],[8,"ColorElement"],[8,"ColorElementConversion"],[3,"Color"],[4,"CommonError"]]},\
"riddle_font":{"doc":"Riddle crate for loading font files and rendering text to …","i":[[0,"rusttype_ext","riddle_font","Traits which expose underlying rusttype crates types",null,null],[8,"RustTypeTTFontExt","riddle_font::rusttype_ext","",null,null],[10,"rustype_font","","",0,[[],["font",4]]],[4,"FontError","riddle_font","",null,null],[13,"ImageError","","",1,null],[13,"FontParseFailed","","",1,null],[13,"CommonError","","",1,null],[3,"TTFont","","Represents a parsed TTF file, and facilitates simple …",null,null],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"rustype_font","","",2,[[],["font",4]]],[11,"from","","",1,[[["commonerror",4]]]],[11,"from","","",1,[[["imageerror",4]]]],[11,"from","","",1,[[["error",3]]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"source","","",1,[[],[["option",4],["error",8]]]],[11,"load","","Construct a new TTFont from a <code>Read</code> instance. The source …",2,[[["read",8]],[["result",4],["fonterror",4]]]],[11,"load_async","","Construct a new TTFont from an <code>AsyncRead</code> instance. The …",2,[[["asyncread",8],["unpin",8]]]],[11,"render_simple","","Render a string in this font to an image. It will only be …",2,[[["u32",15],["str",15]],[["result",4],["image",3],["fonterror",4]]]]],"p":[[8,"RustTypeTTFontExt"],[4,"FontError"],[3,"TTFont"]]},\
"riddle_image":{"doc":"Riddle crate for loading and manipulating image data in …","i":[[0,"image_ext","riddle_image","Traits which expose underlying image crate’s types",null,null],[8,"ImageImageExt","riddle_image::image_ext","",null,null],[10,"image_rgbaimage","","",0,[[],["rgbaimage",6]]],[3,"Image","riddle_image","A representation of an image stored in main memory. The …",null,null],[4,"ImageFormat","","The set of support image file formats which [<code>Image</code>] can …",null,null],[13,"Png","","",1,null],[13,"Bmp","","",1,null],[13,"Jpeg","","",1,null],[4,"ImageError","","",null,null],[13,"Unknown","","",2,null],[13,"CommonError","","",2,null],[3,"Color","","An RGBA color, parameterized over color channel type.",null,null],[12,"r","","Red",3,null],[12,"g","","Green",3,null],[12,"b","","Blue",3,null],[12,"a","","Alpha",3,null],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_string","","",2,[[],["string",3]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"clone","","",3,[[],["color",3]]],[11,"convert","","",3,[[],["color",3]]],[11,"eq","","",3,[[["color",3]],["bool",15]]],[11,"fmt","","",3,[[["formatter",3]],[["result",4],["error",3]]]],[11,"from","","",3,[[],["color",3]]],[11,"from","","",3,[[],["color",3]]],[11,"image_rgbaimage","","",4,[[],["rgbaimage",6]]],[11,"from","","",2,[[["commonerror",4]]]],[11,"from","","",2,[[["imageerror",4]]]],[11,"from","","",2,[[["error",3]]]],[11,"clone","","",4,[[],["image",3]]],[11,"clone","","",1,[[],["imageformat",4]]],[11,"eq","","",1,[[["imageformat",4]],["bool",15]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"source","","",2,[[],[["option",4],["error",8]]]],[11,"load","","Load an image from a <code>Read</code> instance which emits image file …",4,[[["imageformat",4],["read",8]],[["result",4],["imageerror",4]]]],[11,"load_async","","Load an image from a <code>AsyncRead</code> instance which emits image …",4,[[["imageformat",4]]]],[11,"from_bytes","","Load an image from a byte slice in the specified format.",4,[[["imageformat",4]],[["result",4],["imageerror",4]]]],[11,"new","","Create a new image with the given dimensions, all pixels …",4,[[["u32",15]]]],[11,"get_pixel","","Get the color of the pixel at the given coordinates",4,[[["u32",15]],[["color",3],["u8",15]]]],[11,"set_pixel","","Set the color of the pixel at the given coordinates",4,[[["u32",15],["color",3],["colorelementconversion",8]]]],[11,"as_rgba8","","Borrow the bytes representing the entire image, encoded …",4,[[]]],[11,"as_rgba8_mut","","Mutably borrow the bytes representing the entire image, …",4,[[]]],[11,"byte_count","","Get the byte count of the entire image encoded as RGBA8",4,[[],["usize",15]]],[11,"width","","Width of the image in pixels",4,[[],["u32",15]]],[11,"height","","Height of the image in pixels",4,[[],["u32",15]]],[11,"dimensions","","Dimension of the image in pixels",4,[[],[["u32",15],["vector2",3]]]],[11,"rect","","Get the bounding rect for the image, located at (0,0) and …",4,[[],[["u32",15],["rect",3]]]],[11,"blit","","Blit another image on to self. The location is the …",4,[[["image",3],["vector2",3],["i32",15]]]],[18,"RED","","Opaque primary red",3,null],[18,"GREEN","","Opaque primary green",3,null],[18,"BLUE","","Opaque primary blue",3,null],[18,"BLACK","","Opaque black",3,null],[18,"WHITE","","Opaque white",3,null],[18,"TRANSPARENT_BLACK","","Transparent black",3,null],[18,"ZERO","","Transparent black",3,null],[11,"rgba","","Example",3,[[],["color",3]]],[11,"rgb","","Example",3,[[],["color",3]]]],"p":[[8,"ImageImageExt"],[4,"ImageFormat"],[4,"ImageError"],[3,"Color"],[3,"Image"]]},\
"riddle_input":{"doc":"Riddle crate dealing with user input (keyboard, mouse, …","i":[[0,"ext","riddle_input","Types which are needed to use the input system …",null,null],[8,"InputSystemExt","riddle_input::ext","",null,null],[10,"new_shared","","Create the input system, initializing any input device …",0,[[["eventpub",3]],[["result",4],["inputerror",4]]]],[10,"take_input_events","","Collect any buffered [<code>InputEvent</code>]s emitted by the input …",0,[[],[["vec",3],["inputevent",4]]]],[4,"InputError","riddle_input","",null,null],[13,"InitError","","",1,null],[13,"Unknown","","",1,null],[4,"InputEvent","","",null,null],[13,"CursorMove","","",2,null],[12,"window","riddle_input::InputEvent","",3,null],[12,"position","","",3,null],[13,"MouseButtonDown","riddle_input","",2,null],[12,"window","riddle_input::InputEvent","",4,null],[12,"button","","",4,null],[13,"MouseButtonUp","riddle_input","",2,null],[12,"window","riddle_input::InputEvent","",5,null],[12,"button","","",5,null],[13,"KeyDown","riddle_input","",2,null],[12,"window","riddle_input::InputEvent","",6,null],[12,"scancode","","",6,null],[12,"vkey","","",6,null],[12,"modifiers","","",6,null],[13,"KeyUp","riddle_input","",2,null],[12,"window","riddle_input::InputEvent","",7,null],[12,"scancode","","",7,null],[12,"vkey","","",7,null],[12,"modifiers","","",7,null],[13,"GamePadConnected","riddle_input","",2,null],[13,"GamePadDisconnected","","",2,null],[13,"GamePadButtonDown","","",2,null],[12,"gamepad","riddle_input::InputEvent","",8,null],[12,"button","","",8,null],[13,"GamePadButtonUp","riddle_input","",2,null],[12,"gamepad","riddle_input::InputEvent","",9,null],[12,"button","","",9,null],[13,"GamePadAxisChanged","riddle_input","",2,null],[12,"gamepad","riddle_input::InputEvent","",10,null],[12,"axis","","",10,null],[12,"value","","",10,null],[3,"GamePadId","riddle_input","An identifier mapping to a particular gamepad, used for …",null,null],[4,"GamePadButton","","GamePad Button identifiers.",null,null],[13,"South","","",11,null],[13,"North","","",11,null],[13,"East","","",11,null],[13,"West","","",11,null],[13,"DPadUp","","",11,null],[13,"DPadDown","","",11,null],[13,"DPadLeft","","",11,null],[13,"DPadRight","","",11,null],[13,"LeftStick","","",11,null],[13,"RightStick","","",11,null],[13,"LeftShoulder","","",11,null],[13,"RightShoulder","","",11,null],[13,"LeftTrigger","","",11,null],[13,"RightTrigger","","",11,null],[13,"Start","","",11,null],[13,"Back","","",11,null],[4,"GamePadAxis","","GamePad axis identifiers.",null,null],[13,"LeftStickX","","",12,null],[13,"LeftStickY","","",12,null],[13,"RightStickX","","",12,null],[13,"RightStickY","","",12,null],[3,"InputSystem","","The Riddle input system core state, along with […",null,null],[3,"InputSystemHandle","","",null,null],[3,"InputSystemWeak","","",null,null],[3,"InputMainThreadState","","The portion of the input system that needs to remain on a …",null,null],[3,"KeyboardModifiers","","A snapshot of which keyboard modifiers are currently …",null,null],[12,"shift","","",13,null],[12,"ctrl","","",13,null],[12,"alt","","",13,null],[3,"LogicalPosition","","A 2d position in logical screen units.",null,null],[12,"x","","",14,null],[12,"y","","",14,null],[4,"MouseButton","","Mouse button identifiers.",null,null],[13,"Left","","",15,null],[13,"Right","","",15,null],[13,"Middle","","",15,null],[13,"Other","","",15,null],[4,"Scancode","","Supported scancodes.",null,null],[13,"Unknown","","",16,null],[13,"Escape","","",16,null],[13,"One","","",16,null],[13,"Two","","",16,null],[13,"Three","","",16,null],[13,"Four","","",16,null],[13,"Five","","",16,null],[13,"Six","","",16,null],[13,"Seven","","",16,null],[13,"Eight","","",16,null],[13,"Nine","","",16,null],[13,"Zero","","",16,null],[13,"Minus","","",16,null],[13,"Equal","","",16,null],[13,"Backspace","","",16,null],[13,"Tab","","",16,null],[13,"Q","","",16,null],[13,"W","","",16,null],[13,"E","","",16,null],[13,"R","","",16,null],[13,"T","","",16,null],[13,"Y","","",16,null],[13,"U","","",16,null],[13,"I","","",16,null],[13,"O","","",16,null],[13,"P","","",16,null],[13,"LeftBrace","","",16,null],[13,"RightBrace","","",16,null],[13,"Enter","","",16,null],[13,"LeftControl","","",16,null],[13,"A","","",16,null],[13,"D","","",16,null],[13,"S","","",16,null],[13,"F","","",16,null],[13,"G","","",16,null],[13,"H","","",16,null],[13,"J","","",16,null],[13,"K","","",16,null],[13,"L","","",16,null],[13,"Semicolon","","",16,null],[13,"Apostrope","","",16,null],[13,"Grave","","",16,null],[13,"LeftShift","","",16,null],[13,"Backslash","","",16,null],[13,"Z","","",16,null],[13,"X","","",16,null],[13,"C","","",16,null],[13,"V","","",16,null],[13,"B","","",16,null],[13,"N","","",16,null],[13,"M","","",16,null],[13,"Comma","","",16,null],[13,"Dot","","",16,null],[13,"Slash","","",16,null],[13,"RightShift","","",16,null],[13,"KeyPadAsterick","","",16,null],[13,"LeftAlt","","",16,null],[13,"Space","","",16,null],[13,"CapsLock","","",16,null],[13,"F1","","",16,null],[13,"F2","","",16,null],[13,"F3","","",16,null],[13,"F4","","",16,null],[13,"F5","","",16,null],[13,"F6","","",16,null],[13,"F7","","",16,null],[13,"F8","","",16,null],[13,"F9","","",16,null],[13,"F10","","",16,null],[13,"NumLock","","",16,null],[13,"ScrollLock","","",16,null],[13,"KeyPad7","","",16,null],[13,"KeyPad8","","",16,null],[13,"KeyPad9","","",16,null],[13,"KeyPadMinus","","",16,null],[13,"KeyPad4","","",16,null],[13,"KeyPad5","","",16,null],[13,"KeyPad6","","",16,null],[13,"KeyPadPlus","","",16,null],[13,"KeyPad1","","",16,null],[13,"KeyPad2","","",16,null],[13,"KeyPad3","","",16,null],[13,"KeyPad0","","",16,null],[13,"KeyPadDot","","",16,null],[13,"NonUSBackslash","","",16,null],[13,"F11","","",16,null],[13,"F12","","",16,null],[13,"KeyPadEnter","","",16,null],[13,"RightAlt","","",16,null],[13,"Home","","",16,null],[13,"Up","","",16,null],[13,"PageUp","","",16,null],[13,"Left","","",16,null],[13,"Right","","",16,null],[13,"End","","",16,null],[13,"Down","","",16,null],[13,"PageDown","","",16,null],[13,"Insert","","",16,null],[13,"Delete","","",16,null],[13,"KeyPadEqual","","",16,null],[13,"KeyPadPlusMinus","","",16,null],[4,"VirtualKey","","Supported virtual keys.",null,null],[13,"Unknown","","",17,null],[13,"Escape","","",17,null],[13,"One","","",17,null],[13,"Two","","",17,null],[13,"Three","","",17,null],[13,"Four","","",17,null],[13,"Five","","",17,null],[13,"Six","","",17,null],[13,"Seven","","",17,null],[13,"Eight","","",17,null],[13,"Nine","","",17,null],[13,"Zero","","",17,null],[13,"Minus","","",17,null],[13,"Equal","","",17,null],[13,"Backspace","","",17,null],[13,"Tab","","",17,null],[13,"Q","","",17,null],[13,"W","","",17,null],[13,"E","","",17,null],[13,"R","","",17,null],[13,"T","","",17,null],[13,"Y","","",17,null],[13,"U","","",17,null],[13,"I","","",17,null],[13,"O","","",17,null],[13,"P","","",17,null],[13,"LeftBrace","","",17,null],[13,"RightBrace","","",17,null],[13,"Enter","","",17,null],[13,"LeftControl","","",17,null],[13,"A","","",17,null],[13,"D","","",17,null],[13,"S","","",17,null],[13,"F","","",17,null],[13,"G","","",17,null],[13,"H","","",17,null],[13,"J","","",17,null],[13,"K","","",17,null],[13,"L","","",17,null],[13,"Semicolon","","",17,null],[13,"Apostrope","","",17,null],[13,"Grave","","",17,null],[13,"LeftShift","","",17,null],[13,"Backslash","","",17,null],[13,"Z","","",17,null],[13,"X","","",17,null],[13,"C","","",17,null],[13,"V","","",17,null],[13,"B","","",17,null],[13,"N","","",17,null],[13,"M","","",17,null],[13,"Comma","","",17,null],[13,"Dot","","",17,null],[13,"Slash","","",17,null],[13,"RightShift","","",17,null],[13,"KeyPadAsterick","","",17,null],[13,"LeftAlt","","",17,null],[13,"Space","","",17,null],[13,"CapsLock","","",17,null],[13,"F1","","",17,null],[13,"F2","","",17,null],[13,"F3","","",17,null],[13,"F4","","",17,null],[13,"F5","","",17,null],[13,"F6","","",17,null],[13,"F7","","",17,null],[13,"F8","","",17,null],[13,"F9","","",17,null],[13,"F10","","",17,null],[13,"NumLock","","",17,null],[13,"ScrollLock","","",17,null],[13,"KeyPad7","","",17,null],[13,"KeyPad8","","",17,null],[13,"KeyPad9","","",17,null],[13,"KeyPadMinus","","",17,null],[13,"KeyPad4","","",17,null],[13,"KeyPad5","","",17,null],[13,"KeyPad6","","",17,null],[13,"KeyPadPlus","","",17,null],[13,"KeyPad1","","",17,null],[13,"KeyPad2","","",17,null],[13,"KeyPad3","","",17,null],[13,"KeyPad0","","",17,null],[13,"KeyPadDot","","",17,null],[13,"NonUSBackslash","","",17,null],[13,"F11","","",17,null],[13,"F12","","",17,null],[13,"KeyPadEnter","","",17,null],[13,"RightAlt","","",17,null],[13,"Home","","",17,null],[13,"Up","","",17,null],[13,"PageUp","","",17,null],[13,"Left","","",17,null],[13,"Right","","",17,null],[13,"End","","",17,null],[13,"Down","","",17,null],[13,"PageDown","","",17,null],[13,"Insert","","",17,null],[13,"Delete","","",17,null],[13,"KeyPadEqual","","",17,null],[13,"KeyPadPlusMinus","","",17,null],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"to_owned","","",21,[[]]],[11,"clone_into","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"clone","","",14,[[],["logicalposition",3]]],[11,"clone","","",16,[[],["scancode",4]]],[11,"clone","","",17,[[],["virtualkey",4]]],[11,"clone","","",15,[[],["mousebutton",4]]],[11,"eq","","",17,[[["virtualkey",4]],["bool",15]]],[11,"eq","","",14,[[["logicalposition",3]],["bool",15]]],[11,"ne","","",14,[[["logicalposition",3]],["bool",15]]],[11,"eq","","",15,[[["mousebutton",4]],["bool",15]]],[11,"ne","","",15,[[["mousebutton",4]],["bool",15]]],[11,"eq","","",16,[[["scancode",4]],["bool",15]]],[11,"default","","",14,[[],["logicalposition",3]]],[11,"hash","","",15,[[]]],[11,"fmt","","",16,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",14,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",15,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",17,[[["formatter",3]],[["result",4],["error",3]]]],[11,"from","","",14,[[["u32",15],["vector2",3]],["logicalposition",3]]],[11,"from","","",16,[[["u32",15]],["scancode",4]]],[11,"from","","",14,[[["logicalvec2",3]],["logicalposition",3]]],[11,"new_shared","","",19,[[["eventpub",3]],[["result",4],["inputerror",4]]]],[11,"take_input_events","","",19,[[],[["vec",3],["inputevent",4]]]],[11,"from","","",18,[[["gamepadid",3]]]],[11,"clone","","",2,[[],["inputevent",4]]],[11,"clone","","",18,[[],["gamepadid",3]]],[11,"clone","","",11,[[],["gamepadbutton",4]]],[11,"clone","","",12,[[],["gamepadaxis",4]]],[11,"clone","","",20,[[],["inputsystemhandle",3]]],[11,"clone","","",21,[[],["inputsystemweak",3]]],[11,"clone","","",13,[[],["keyboardmodifiers",3]]],[11,"eq","","",2,[[["inputevent",4]],["bool",15]]],[11,"ne","","",2,[[["inputevent",4]],["bool",15]]],[11,"eq","","",18,[[["gamepadid",3]],["bool",15]]],[11,"ne","","",18,[[["gamepadid",3]],["bool",15]]],[11,"eq","","",11,[[["gamepadbutton",4]],["bool",15]]],[11,"eq","","",12,[[["gamepadaxis",4]],["bool",15]]],[11,"eq","","",13,[[["keyboardmodifiers",3]],["bool",15]]],[11,"ne","","",13,[[["keyboardmodifiers",3]],["bool",15]]],[11,"deref","","",20,[[],["inputsystem",3]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"hash","","",18,[[]]],[11,"hash","","",11,[[]]],[11,"hash","","",12,[[]]],[11,"try_from","","",11,[[["button",4]],[["result",4],["button",4]]]],[11,"try_from","","",12,[[["axis",4]],[["axis",4],["result",4]]]],[11,"clone_handle","","",19,[[],["inputsystemhandle",3]]],[11,"clone_weak_handle","","",19,[[],["inputsystemweak",3]]],[11,"downgrade","","Downgrade this handle to a weak handle",20,[[["inputsystemhandle",3]],["inputsystemweak",3]]],[11,"eq","","Test whether two handles point to the same location in …",20,[[["inputsystemhandle",3]],["bool",15]]],[11,"upgrade","","Upgrade a weak handle to a strong handle. Returns None if …",21,[[["inputsystemweak",3]],[["inputsystemhandle",3],["option",4]]]],[11,"mouse_pos","","Query the cursor position with respect to a given window.",19,[[["windowid",3]],["logicalposition",3]]],[11,"is_mouse_button_down","","Check if the specified mouse button is down with respect …",19,[[["windowid",3],["mousebutton",4]],["bool",15]]],[11,"is_key_down","","Query the keyboard scancode state with respect to a given …",19,[[["scancode",4],["windowid",3]],["bool",15]]],[11,"is_vkey_down","","Query the keyboard virtual key state with respect to a …",19,[[["windowid",3],["virtualkey",4]],["bool",15]]],[11,"keyboard_modifiers","","The current state of keyboard modifiers with respect to a …",19,[[["windowid",3]],["keyboardmodifiers",3]]],[11,"last_active_gamepad","","Get the [<code>GamePadId</code>] of the last gamepad which issued any …",19,[[],[["gamepadid",3],["option",4]]]],[11,"is_gamepad_button_down","","Check if a specific button is pressed for a given gamepad.",19,[[["gamepadbutton",4],["gamepadid",3]],["bool",15]]],[11,"gamepad_axis_value","","Get the value of a specific axis for a specific gamepad",19,[[["gamepadaxis",4],["gamepadid",3]],["f32",15]]],[11,"process_input","","Process all input sources, updating the static view of …",22,[[]]],[11,"into_physical","","Convert the position from logical units to physical pixel …",14,[[]]]],"p":[[8,"InputSystemExt"],[4,"InputError"],[4,"InputEvent"],[13,"CursorMove"],[13,"MouseButtonDown"],[13,"MouseButtonUp"],[13,"KeyDown"],[13,"KeyUp"],[13,"GamePadButtonDown"],[13,"GamePadButtonUp"],[13,"GamePadAxisChanged"],[4,"GamePadButton"],[4,"GamePadAxis"],[3,"KeyboardModifiers"],[3,"LogicalPosition"],[4,"MouseButton"],[4,"Scancode"],[4,"VirtualKey"],[3,"GamePadId"],[3,"InputSystem"],[3,"InputSystemHandle"],[3,"InputSystemWeak"],[3,"InputMainThreadState"]]},\
"riddle_math":{"doc":"Riddle crate supplying basic math types and utilities to …","i":[[3,"Rect","riddle_math","An axis aligned 2d rectangle with both a location and …",null,null],[12,"location","","The coordinates of the min point of the rectangle.",0,null],[12,"dimensions","","The size of the rectangle",0,null],[8,"SpacialNumeric","","Numeric types over which [<code>crate::Rect</code>] and [<code>crate::Vector2</code>…",null,null],[8,"SignedSpacialNumeric","","Types which as well as being defined as SpacialNumeric, …",null,null],[8,"SpacialNumericConversion","","Define the conversion between two SpacialNumeric types.",null,null],[10,"convert","","Convert one SpacialNumeric value to another. This …",1,[[]]],[3,"Vector2","","A basic 2d vector, supporting a small selection of …",null,null],[12,"x","","",2,null],[12,"y","","",2,null],[5,"vec2","","Utility function to abbreviate [<code>Vector2</code>] creation",null,[[],["vector2",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"convert","","",0,[[],["rect",3]]],[11,"convert","","",2,[[],["vector2",3]]],[11,"from","","",2,[[]]],[11,"from","","",2,[[["vector2",3]]]],[11,"from","","",2,[[["vec2",3]]]],[11,"clone","","",0,[[],["rect",3]]],[11,"clone","","",2,[[],["vector2",3]]],[11,"default","","",2,[[]]],[11,"eq","","",0,[[],["bool",15]]],[11,"eq","","",2,[[],["bool",15]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"sub","","",2,[[["vector2",3]]]],[11,"add","","",2,[[["vector2",3]]]],[11,"mul","","",2,[[]]],[11,"neg","","",2,[[]]],[11,"add_assign","","",2,[[["vector2",3]]]],[11,"sub_assign","","",2,[[["vector2",3]]]],[11,"new","","Create a new rect",0,[[["into",8],["vector2",3]]]],[11,"min_point","","Get the min point of the rect, the same as its location",0,[[],["vector2",3]]],[11,"max_point","","Get the max point of the rect",0,[[],["vector2",3]]],[11,"intersect","","Get the intersection rect of two rectangles, if one exists",0,[[],["option",4]]],[11,"contains_point","","Test to see whether a point lies within the rect.",0,[[["vector2",3]],["bool",15]]],[11,"intersect_relative_to_both","","Given the dimensions of two rects, and the relative …",0,[[["vector2",3],["spacialnumericconversion",8],["vector2",3]],["option",4]]],[11,"new","","Create a vector with the given coordinatates.",2,[[]]]],"p":[[3,"Rect"],[8,"SpacialNumericConversion"],[3,"Vector2"]]},\
"riddle_platform_common":{"doc":"Riddle crate containing common utilities and types needed …","i":[[0,"traits","riddle_platform_common","Traits needed in order to implement a riddle compatible …",null,null],[8,"WindowCommon","riddle_platform_common::traits","Functionality Window types need in order to be able to …",null,null],[10,"logical_to_physical","","Convert a logical vec2 in to a physical pixel unit (x,y) …",0,[[["into",8],["logicalvec2",3]]]],[3,"LogicalSize","riddle_platform_common","A 2d size in logical screen units.",null,null],[12,"width","","",1,null],[12,"height","","",1,null],[3,"LogicalPosition","","A 2d position in logical screen units.",null,null],[12,"x","","",2,null],[12,"y","","",2,null],[3,"LogicalVec2","","A 2d vector in logical screen units.",null,null],[12,"x","","",3,null],[12,"y","","",3,null],[4,"PlatformEvent","","",null,null],[13,"WindowClose","","",4,null],[13,"WindowResize","","",4,null],[13,"CursorMove","","",4,null],[12,"window","riddle_platform_common::PlatformEvent","",5,null],[12,"position","","",5,null],[13,"MouseButtonDown","riddle_platform_common","",4,null],[12,"window","riddle_platform_common::PlatformEvent","",6,null],[12,"button","","",6,null],[13,"MouseButtonUp","riddle_platform_common","",4,null],[12,"window","riddle_platform_common::PlatformEvent","",7,null],[12,"button","","",7,null],[13,"KeyDown","riddle_platform_common","",4,null],[12,"window","riddle_platform_common::PlatformEvent","",8,null],[12,"platform_scancode","","",8,null],[12,"scancode","","",8,null],[12,"vkey","","",8,null],[13,"KeyUp","riddle_platform_common","",4,null],[12,"window","riddle_platform_common::PlatformEvent","",9,null],[12,"platform_scancode","","",9,null],[12,"scancode","","",9,null],[12,"vkey","","",9,null],[13,"EventQueueEmpty","riddle_platform_common","",4,null],[13,"Unknown","","",4,null],[4,"MouseButton","","Mouse button identifiers.",null,null],[13,"Left","","",10,null],[13,"Right","","",10,null],[13,"Middle","","",10,null],[13,"Other","","",10,null],[4,"Scancode","","Supported scancodes.",null,null],[13,"Unknown","","",11,null],[13,"Escape","","",11,null],[13,"One","","",11,null],[13,"Two","","",11,null],[13,"Three","","",11,null],[13,"Four","","",11,null],[13,"Five","","",11,null],[13,"Six","","",11,null],[13,"Seven","","",11,null],[13,"Eight","","",11,null],[13,"Nine","","",11,null],[13,"Zero","","",11,null],[13,"Minus","","",11,null],[13,"Equal","","",11,null],[13,"Backspace","","",11,null],[13,"Tab","","",11,null],[13,"Q","","",11,null],[13,"W","","",11,null],[13,"E","","",11,null],[13,"R","","",11,null],[13,"T","","",11,null],[13,"Y","","",11,null],[13,"U","","",11,null],[13,"I","","",11,null],[13,"O","","",11,null],[13,"P","","",11,null],[13,"LeftBrace","","",11,null],[13,"RightBrace","","",11,null],[13,"Enter","","",11,null],[13,"LeftControl","","",11,null],[13,"A","","",11,null],[13,"D","","",11,null],[13,"S","","",11,null],[13,"F","","",11,null],[13,"G","","",11,null],[13,"H","","",11,null],[13,"J","","",11,null],[13,"K","","",11,null],[13,"L","","",11,null],[13,"Semicolon","","",11,null],[13,"Apostrope","","",11,null],[13,"Grave","","",11,null],[13,"LeftShift","","",11,null],[13,"Backslash","","",11,null],[13,"Z","","",11,null],[13,"X","","",11,null],[13,"C","","",11,null],[13,"V","","",11,null],[13,"B","","",11,null],[13,"N","","",11,null],[13,"M","","",11,null],[13,"Comma","","",11,null],[13,"Dot","","",11,null],[13,"Slash","","",11,null],[13,"RightShift","","",11,null],[13,"KeyPadAsterick","","",11,null],[13,"LeftAlt","","",11,null],[13,"Space","","",11,null],[13,"CapsLock","","",11,null],[13,"F1","","",11,null],[13,"F2","","",11,null],[13,"F3","","",11,null],[13,"F4","","",11,null],[13,"F5","","",11,null],[13,"F6","","",11,null],[13,"F7","","",11,null],[13,"F8","","",11,null],[13,"F9","","",11,null],[13,"F10","","",11,null],[13,"NumLock","","",11,null],[13,"ScrollLock","","",11,null],[13,"KeyPad7","","",11,null],[13,"KeyPad8","","",11,null],[13,"KeyPad9","","",11,null],[13,"KeyPadMinus","","",11,null],[13,"KeyPad4","","",11,null],[13,"KeyPad5","","",11,null],[13,"KeyPad6","","",11,null],[13,"KeyPadPlus","","",11,null],[13,"KeyPad1","","",11,null],[13,"KeyPad2","","",11,null],[13,"KeyPad3","","",11,null],[13,"KeyPad0","","",11,null],[13,"KeyPadDot","","",11,null],[13,"NonUSBackslash","","",11,null],[13,"F11","","",11,null],[13,"F12","","",11,null],[13,"KeyPadEnter","","",11,null],[13,"RightAlt","","",11,null],[13,"Home","","",11,null],[13,"Up","","",11,null],[13,"PageUp","","",11,null],[13,"Left","","",11,null],[13,"Right","","",11,null],[13,"End","","",11,null],[13,"Down","","",11,null],[13,"PageDown","","",11,null],[13,"Insert","","",11,null],[13,"Delete","","",11,null],[13,"KeyPadEqual","","",11,null],[13,"KeyPadPlusMinus","","",11,null],[4,"VirtualKey","","Supported virtual keys.",null,null],[13,"Unknown","","",12,null],[13,"Escape","","",12,null],[13,"One","","",12,null],[13,"Two","","",12,null],[13,"Three","","",12,null],[13,"Four","","",12,null],[13,"Five","","",12,null],[13,"Six","","",12,null],[13,"Seven","","",12,null],[13,"Eight","","",12,null],[13,"Nine","","",12,null],[13,"Zero","","",12,null],[13,"Minus","","",12,null],[13,"Equal","","",12,null],[13,"Backspace","","",12,null],[13,"Tab","","",12,null],[13,"Q","","",12,null],[13,"W","","",12,null],[13,"E","","",12,null],[13,"R","","",12,null],[13,"T","","",12,null],[13,"Y","","",12,null],[13,"U","","",12,null],[13,"I","","",12,null],[13,"O","","",12,null],[13,"P","","",12,null],[13,"LeftBrace","","",12,null],[13,"RightBrace","","",12,null],[13,"Enter","","",12,null],[13,"LeftControl","","",12,null],[13,"A","","",12,null],[13,"D","","",12,null],[13,"S","","",12,null],[13,"F","","",12,null],[13,"G","","",12,null],[13,"H","","",12,null],[13,"J","","",12,null],[13,"K","","",12,null],[13,"L","","",12,null],[13,"Semicolon","","",12,null],[13,"Apostrope","","",12,null],[13,"Grave","","",12,null],[13,"LeftShift","","",12,null],[13,"Backslash","","",12,null],[13,"Z","","",12,null],[13,"X","","",12,null],[13,"C","","",12,null],[13,"V","","",12,null],[13,"B","","",12,null],[13,"N","","",12,null],[13,"M","","",12,null],[13,"Comma","","",12,null],[13,"Dot","","",12,null],[13,"Slash","","",12,null],[13,"RightShift","","",12,null],[13,"KeyPadAsterick","","",12,null],[13,"LeftAlt","","",12,null],[13,"Space","","",12,null],[13,"CapsLock","","",12,null],[13,"F1","","",12,null],[13,"F2","","",12,null],[13,"F3","","",12,null],[13,"F4","","",12,null],[13,"F5","","",12,null],[13,"F6","","",12,null],[13,"F7","","",12,null],[13,"F8","","",12,null],[13,"F9","","",12,null],[13,"F10","","",12,null],[13,"NumLock","","",12,null],[13,"ScrollLock","","",12,null],[13,"KeyPad7","","",12,null],[13,"KeyPad8","","",12,null],[13,"KeyPad9","","",12,null],[13,"KeyPadMinus","","",12,null],[13,"KeyPad4","","",12,null],[13,"KeyPad5","","",12,null],[13,"KeyPad6","","",12,null],[13,"KeyPadPlus","","",12,null],[13,"KeyPad1","","",12,null],[13,"KeyPad2","","",12,null],[13,"KeyPad3","","",12,null],[13,"KeyPad0","","",12,null],[13,"KeyPadDot","","",12,null],[13,"NonUSBackslash","","",12,null],[13,"F11","","",12,null],[13,"F12","","",12,null],[13,"KeyPadEnter","","",12,null],[13,"RightAlt","","",12,null],[13,"Home","","",12,null],[13,"Up","","",12,null],[13,"PageUp","","",12,null],[13,"Left","","",12,null],[13,"Right","","",12,null],[13,"End","","",12,null],[13,"Down","","",12,null],[13,"PageDown","","",12,null],[13,"Insert","","",12,null],[13,"Delete","","",12,null],[13,"KeyPadEqual","","",12,null],[13,"KeyPadPlusMinus","","",12,null],[3,"WindowId","","A platform system independent window identifier.",null,null],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","","",1,[[["logicalvec2",3]]]],[11,"from","","",1,[[["vector2",3],["u32",15]]]],[11,"from","","",2,[[["logicalvec2",3]]]],[11,"from","","",2,[[["vector2",3],["u32",15]]]],[11,"from","","",3,[[["logicalsize",3]]]],[11,"from","","",3,[[["logicalposition",3]]]],[11,"from","","",3,[[["vector2",3],["u32",15]]]],[11,"from","","",11,[[["u32",15]]]],[11,"clone","","",1,[[],["logicalsize",3]]],[11,"clone","","",2,[[],["logicalposition",3]]],[11,"clone","","",3,[[],["logicalvec2",3]]],[11,"clone","","",4,[[],["platformevent",4]]],[11,"clone","","",10,[[],["mousebutton",4]]],[11,"clone","","",11,[[],["scancode",4]]],[11,"clone","","",12,[[],["virtualkey",4]]],[11,"clone","","",13,[[],["windowid",3]]],[11,"default","","",2,[[]]],[11,"eq","","",1,[[["logicalsize",3]],["bool",15]]],[11,"ne","","",1,[[["logicalsize",3]],["bool",15]]],[11,"eq","","",2,[[["logicalposition",3]],["bool",15]]],[11,"ne","","",2,[[["logicalposition",3]],["bool",15]]],[11,"eq","","",3,[[["logicalvec2",3]],["bool",15]]],[11,"ne","","",3,[[["logicalvec2",3]],["bool",15]]],[11,"eq","","",4,[[["platformevent",4]],["bool",15]]],[11,"ne","","",4,[[["platformevent",4]],["bool",15]]],[11,"eq","","",10,[[["mousebutton",4]],["bool",15]]],[11,"ne","","",10,[[["mousebutton",4]],["bool",15]]],[11,"eq","","",11,[[["scancode",4]],["bool",15]]],[11,"eq","","",12,[[["virtualkey",4]],["bool",15]]],[11,"eq","","",13,[[["windowid",3]],["bool",15]]],[11,"ne","","",13,[[["windowid",3]],["bool",15]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"hash","","",10,[[]]],[11,"hash","","",13,[[]]],[11,"into_physical","","Convert the size from logical units to physical pixel …",1,[[]]],[11,"into_physical","","Convert the position from logical units to physical pixel …",2,[[]]],[11,"into_physical","","Convert the vector from logical units to physical pixel …",3,[[]]],[11,"new","","",13,[[["u32",15]]]]],"p":[[8,"WindowCommon"],[3,"LogicalSize"],[3,"LogicalPosition"],[3,"LogicalVec2"],[4,"PlatformEvent"],[13,"CursorMove"],[13,"MouseButtonDown"],[13,"MouseButtonUp"],[13,"KeyDown"],[13,"KeyUp"],[4,"MouseButton"],[4,"Scancode"],[4,"VirtualKey"],[3,"WindowId"]]},\
"riddle_platform_winit":{"doc":"Riddle platform system implementation based on <code>winit</code>, …","i":[[0,"ext","riddle_platform_winit","Types which are needed to use the input system …",null,null],[8,"PlatformSystemExt","riddle_platform_winit::ext","",null,null],[10,"new_shared","","Create a new platform system and its main thread state …",0,[[]]],[0,"winit_ext","riddle_platform_winit","Traits which expose underlying winit crate’s types",null,null],[8,"WinitWindowExt","riddle_platform_winit::winit_ext","",null,null],[10,"winit_window","","",1,[[],["window",3]]],[4,"PlatformError","riddle_platform_winit","",null,null],[13,"MessageDispatchError","","",2,null],[13,"InvalidContextState","","",2,null],[13,"WindowInitFailure","","",2,null],[13,"Unknown","","",2,null],[3,"PlatformContext","","The platform system context provided to the application …",null,null],[3,"PlatformSystem","","The winit platform system core state, along with […",null,null],[3,"PlatformSystemHandle","","",null,null],[3,"PlatformSystemWeak","","",null,null],[3,"PlatformMainThreadState","","",null,null],[3,"Window","","A platform native window.",null,null],[3,"WindowHandle","","",null,null],[3,"WindowWeak","","",null,null],[3,"WindowBuilder","","Builder for [<code>Window</code>] instances.",null,null],[4,"PlatformEvent","","",null,null],[13,"WindowClose","","",3,null],[13,"WindowResize","","",3,null],[13,"CursorMove","","",3,null],[12,"window","riddle_platform_winit::PlatformEvent","",4,null],[12,"position","","",4,null],[13,"MouseButtonDown","riddle_platform_winit","",3,null],[12,"window","riddle_platform_winit::PlatformEvent","",5,null],[12,"button","","",5,null],[13,"MouseButtonUp","riddle_platform_winit","",3,null],[12,"window","riddle_platform_winit::PlatformEvent","",6,null],[12,"button","","",6,null],[13,"KeyDown","riddle_platform_winit","",3,null],[12,"window","riddle_platform_winit::PlatformEvent","",7,null],[12,"platform_scancode","","",7,null],[12,"scancode","","",7,null],[12,"vkey","","",7,null],[13,"KeyUp","riddle_platform_winit","",3,null],[12,"window","riddle_platform_winit::PlatformEvent","",8,null],[12,"platform_scancode","","",8,null],[12,"scancode","","",8,null],[12,"vkey","","",8,null],[13,"EventQueueEmpty","riddle_platform_winit","",3,null],[13,"Unknown","","",3,null],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_string","","",2,[[],["string",3]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"clone","","",3,[[],["platformevent",4]]],[11,"eq","","",3,[[["platformevent",4]],["bool",15]]],[11,"ne","","",3,[[["platformevent",4]],["bool",15]]],[11,"new_shared","","",10,[[]]],[11,"winit_window","","",14,[[],["window",3]]],[11,"drop","","",14,[[]]],[11,"clone","","",11,[[],["platformsystemhandle",3]]],[11,"clone","","",12,[[],["platformsystemweak",3]]],[11,"clone","","",15,[[],["windowhandle",3]]],[11,"clone","","",16,[[],["windowweak",3]]],[11,"default","","",17,[[]]],[11,"eq","","",14,[[],["bool",15]]],[11,"deref","","",11,[[],["platformsystem",3]]],[11,"deref","","",15,[[],["window",3]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"clone_handle","","",10,[[],["platformsystemhandle",3]]],[11,"clone_weak_handle","","",10,[[],["platformsystemweak",3]]],[11,"clone_handle","","",14,[[],["windowhandle",3]]],[11,"clone_weak_handle","","",14,[[],["windowweak",3]]],[11,"raw_window_handle","","",14,[[],["rawwindowhandle",4]]],[11,"logical_to_physical","","",14,[[["into",8],["logicalvec2",3]]]],[11,"quit","","Issue a quit request to the underlying platform system.",9,[[],[["result",4],["platformerror",4]]]],[11,"event","","Get the event associated with the context.",9,[[],["platformevent",4]]],[11,"system","","The platform system associated with this context.",9,[[],["platformsystem",3]]],[11,"downgrade","","Downgrade this handle to a weak handle",11,[[["platformsystemhandle",3]],["platformsystemweak",3]]],[11,"eq","","Test whether two handles point to the same location in …",11,[[["platformsystemhandle",3]],["bool",15]]],[11,"upgrade","","Upgrade a weak handle to a strong handle. Returns None if …",12,[[["platformsystemweak",3]],[["platformsystemhandle",3],["option",4]]]],[11,"event_pub","","Get the [<code>PlatformEvent</code>] publisher, so that other systems …",10,[[],["eventpub",3]]],[11,"lookup_window","","Get a [<code>WindowHandle</code>] associated with a [<code>WindowId</code>], if one …",10,[[["windowid",3]],[["option",4],["windowhandle",3]]]],[11,"run","","Starts the main even loop for this window system.",13,[[]]],[11,"borrow_context","","",13,[[],["platformcontext",3]]],[11,"downgrade","","Downgrade this handle to a weak handle",15,[[["windowhandle",3]],["windowweak",3]]],[11,"eq","","Test whether two handles point to the same location in …",15,[[["windowhandle",3]],["bool",15]]],[11,"upgrade","","Upgrade a weak handle to a strong handle. Returns None if …",16,[[["windowweak",3]],[["option",4],["windowhandle",3]]]],[11,"physical_size","","Get the size of the drawable area of the window in pixels",14,[[]]],[11,"logical_size","","Get the size of the drawable area of the window in …",14,[[],["logicalsize",3]]],[11,"scale_factor","","Get the scale factor of the window, based on how the …",14,[[],["f64",15]]],[11,"set_title","","Set the window title",14,[[["str",15]]]],[11,"subscribe_to_events","","Attach a subscriber to the subset of platform events that …",14,[[["eventsub",3]]]],[11,"id","","The window id which is used to identify this window in […",14,[[],["windowid",3]]],[11,"new","","",17,[[]]],[11,"dimensions","","Set the dimensions of the window, in logical units.",17,[[["u32",15]]]],[11,"resizeable","","Set whether the window is resizeable.",17,[[["bool",15]]]],[11,"title","","Set the window’s title.",17,[[["into",8],["string",3]]]],[11,"cursor_visible","","Set whether the system cursor will be displayed for the …",17,[[["bool",15]]]],[11,"build","","Build the new window, returning a handle to the new …",17,[[],[["windowhandle",3],["result",4],["platformerror",4]]]]],"p":[[8,"PlatformSystemExt"],[8,"WinitWindowExt"],[4,"PlatformError"],[4,"PlatformEvent"],[13,"CursorMove"],[13,"MouseButtonDown"],[13,"MouseButtonUp"],[13,"KeyDown"],[13,"KeyUp"],[3,"PlatformContext"],[3,"PlatformSystem"],[3,"PlatformSystemHandle"],[3,"PlatformSystemWeak"],[3,"PlatformMainThreadState"],[3,"Window"],[3,"WindowHandle"],[3,"WindowWeak"],[3,"WindowBuilder"]]},\
"riddle_renderer_wgpu":{"doc":"Riddle simple sprite-based renderer built on <code>wgpu</code>.","i":[[0,"wgpu_ext","riddle_renderer_wgpu","Traits and structs required to use custom WGPU devices.",null,null],[8,"WGPUDevice","riddle_renderer_wgpu::wgpu_ext","A [<code>WGPURenderer</code>] compatible WGPU device.",null,null],[10,"begin_frame","","Called when the [<code>WGPURenderer</code>] begins rendering to the …",0,[[],[["renderererror",4],["result",4]]]],[10,"end_frame","","When the renderer is done renderering to the swap chain …",0,[[]]],[10,"viewport_dimensions","","The viewport dimensions of the swapchain frame.",0,[[],[["vector2",3],["f32",15]]]],[10,"with_device_info","","Provides a reference to the set of wgpu device state for …",0,[[["fnonce",8]],[["result",4],["renderererror",4]]]],[10,"with_frame","","Provide a reference to the current swap chain frame for …",0,[[["fnonce",8]],[["result",4],["renderererror",4]]]],[3,"WGPUDeviceInfo","","",null,null],[12,"device","","",1,null],[12,"queue","","",1,null],[8,"RenderContext","","Types which accept render calls, tracks current world …",null,null],[10,"set_transform","","Replace the current world transform.",2,[[["f32",15],["columnmatrix4",3]],[["renderererror",4],["result",4]]]],[10,"clear","","Fill the target with a flat color.",2,[[["f32",15],["color",3]],[["renderererror",4],["result",4]]]],[10,"render_internal","","Render a <code>Renderable</code> to the target with the current world …",2,[[],[["renderererror",4],["result",4]]]],[10,"fill_rect","","Draw a solid rect with the given color.",2,[[["color",3],["rect",3],["f32",15]],[["renderererror",4],["result",4]]]],[10,"present","","Consume the context and present any outstanding draw …",2,[[],[["renderererror",4],["result",4]]]],[3,"WGPURenderer","","A simple 2D sprite based renderer.",null,null],[3,"WGPURendererHandle","","",null,null],[3,"WGPURendererWeak","","",null,null],[3,"WGPUSprite","","A renderable region of a texture.",null,null],[3,"WGPUSpriteAtlasBuilder","","Construct a set of [<code>WGPUSprite</code>]s from a set of …",null,null],[3,"WGPUSpriteRenderTarget","","A target which can be both rendered to and referenced as …",null,null],[4,"FilterMode","","Interpolation mode between texels when rendering",null,null],[13,"Nearest","","",3,null],[13,"Linear","","",3,null],[3,"WindowWGPUDevice","","A standard Renderer WGPU device used with …",null,null],[4,"RendererError","riddle_renderer_wgpu","",null,null],[13,"APIInitError","","",4,null],[13,"BeginRenderError","","",4,null],[13,"ImageError","","",4,null],[13,"CommonError","","",4,null],[13,"Unknown","","",4,null],[3,"SpriteRenderCommand","","Builder for a [<code>Sprite</code>] render call",null,null],[3,"SpriteBuilder","","Builder to construct new [<code>Sprite</code>]s from …",null,null],[4,"FilterMode","","Interpolation mode between texels when rendering",null,null],[13,"Nearest","","",3,null],[13,"Linear","","",3,null],[8,"RenderContext","","Types which accept render calls, tracks current world …",null,null],[10,"set_transform","","Replace the current world transform.",2,[[["f32",15],["columnmatrix4",3]],[["renderererror",4],["result",4]]]],[10,"clear","","Fill the target with a flat color.",2,[[["f32",15],["color",3]],[["renderererror",4],["result",4]]]],[10,"render_internal","","Render a <code>Renderable</code> to the target with the current world …",2,[[],[["renderererror",4],["result",4]]]],[10,"fill_rect","","Draw a solid rect with the given color.",2,[[["color",3],["rect",3],["f32",15]],[["renderererror",4],["result",4]]]],[10,"present","","Consume the context and present any outstanding draw …",2,[[],[["renderererror",4],["result",4]]]],[6,"Renderer","","A simple 2D sprite based renderer for a riddle Window.",null,null],[6,"RendererHandle","","Strong handle to a [<code>Renderer</code>].",null,null],[6,"RendererWeak","","Weak handle to a [<code>Renderer</code>].",null,null],[6,"Sprite","","A sprite for the default Window renderer.",null,null],[6,"SpriteAtlasBuilder","","Construct a set of [<code>Sprite</code>]s from a set of …",null,null],[6,"SpriteRenderTarget","","A target which can be both rendered to and referenced as …",null,null],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_string","","",4,[[],["string",3]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","riddle_renderer_wgpu::wgpu_ext","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"viewport_dimensions","","",13,[[],[["vector2",3],["f32",15]]]],[11,"begin_frame","","",13,[[],[["renderererror",4],["result",4]]]],[11,"end_frame","","",13,[[]]],[11,"with_device_info","","",13,[[],[["result",4],["renderererror",4]]]],[11,"with_frame","","",13,[[],[["result",4],["renderererror",4]]]],[11,"from","riddle_renderer_wgpu","",4,[[["imageerror",4]]]],[11,"from","","",4,[[["commonerror",4]]]],[11,"clone","","",5,[[],["spriterendercommand",3]]],[11,"clone","riddle_renderer_wgpu::wgpu_ext","",8,[[]]],[11,"clone","","",9,[[]]],[11,"default","riddle_renderer_wgpu","",5,[[]]],[11,"default","riddle_renderer_wgpu::wgpu_ext","",11,[[]]],[11,"default","","",3,[[]]],[11,"deref","","",8,[[],["wgpurenderer",3]]],[11,"fmt","riddle_renderer_wgpu","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"source","","",4,[[],[["option",4],["error",8]]]],[11,"clone_handle","riddle_renderer_wgpu::wgpu_ext","",7,[[],["wgpurendererhandle",3]]],[11,"clone_weak_handle","","",7,[[],["wgpurendererweak",3]]],[11,"new","riddle_renderer_wgpu","New render command with default args, at the specified …",5,[[["into",8],["vector2",3]]]],[11,"at","","Set the location of the sprite, specifying where the …",5,[[["into",8],["vector2",3]]]],[11,"with_pivot","","Set the pivot of the sprite, relative to the top left of …",5,[[["into",8],["vector2",3]]]],[11,"with_scale","","Set the scale at which the sprite will be rendered",5,[[["into",8],["vector2",3]]]],[11,"with_angle","","Set the angle at which the sprite will be rendered, in …",5,[[["f32",15]]]],[11,"with_color","","Set the diffuse color of the sprite, which will be …",5,[[["f32",15],["color",3]]]],[11,"render","","Invoke the render command, for the given sprite, in the …",5,[[["wgpusprite",3]],[["renderererror",4],["result",4]]]],[11,"new","","Create a new builder for the given image",6,[[["image",3]]]],[11,"with_filter_modes","","Specify the min and mag filters used when rendering the …",6,[[["filtermode",4]]]],[11,"build","","Build the sprite for the given renderer",6,[[["wgpurenderer",3]],[["renderererror",4],["result",4],["wgpusprite",3]]]],[11,"downgrade","riddle_renderer_wgpu::wgpu_ext","Downgrade this handle to a weak handle",8,[[],["wgpurendererweak",3]]],[11,"eq","","Test whether two handles point to the same location in …",8,[[],["bool",15]]],[11,"upgrade","","Upgrade a weak handle to a strong handle. Returns None if …",9,[[],[["wgpurendererhandle",3],["option",4]]]],[11,"new_from_window","","Initialize a new Renderer, creating a WGPU device for the …",7,[[["window",3]],[["result",4],["renderererror",4],["wgpurendererhandle",3]]]],[11,"dimensions","","Get the frame dimensions as reported by the [<code>WGPUDevice</code>].",7,[[],[["vector2",3],["f32",15]]]],[11,"begin_render","","Get a render context for the current swap chain frame.",7,[[],[["renderererror",4],["result",4]]]],[11,"wgpu_device","","",7,[[]]],[11,"new_from_device","","Or the renderer can be built on top of existing WGPU …",7,[[],[["renderererror",4],["wgpurendererhandle",3],["result",4]]]],[11,"subsprite","","Build a sprite that shares the same underlying texture …",10,[[["rect",3]]]],[11,"render_at","","Utility function to simply render the sprite at a given …",10,[[["into",8],["vector2",3]],[["renderererror",4],["result",4]]]],[11,"dimensions","","Get the dimensions of the sprite",10,[[],[["vector2",3],["f32",15]]]],[11,"new","","A new empty atlas builder",11,[[]]],[11,"with_image","","Add an image to be packed in to the atlas, along with a …",11,[[["image",3],["option",4]]]],[11,"with_filter_modes","","Specify the min and mag filters used when rendering the …",11,[[["filtermode",4]]]],[11,"build","","Construct the atlas texture from the given set of images, …",11,[[["wgpurenderer",3]],[["renderererror",4],["result",4]]]],[11,"new","","Create a new render target with the specified dimensions",12,[[["vector2",3],["u32",15],["wgpurenderer",3]],[["renderererror",4],["result",4]]]],[11,"begin_render","","Get a render context for the current swap chain frame.",12,[[],[["renderererror",4],["result",4]]]],[11,"sprite","","Get the sprite which can be used to render the contents …",12,[[],["wgpusprite",3]]],[11,"new","","",13,[[["window",3]],[["renderererror",4],["result",4]]]]],"p":[[8,"WGPUDevice"],[3,"WGPUDeviceInfo"],[8,"RenderContext"],[4,"FilterMode"],[4,"RendererError"],[3,"SpriteRenderCommand"],[3,"SpriteBuilder"],[3,"WGPURenderer"],[3,"WGPURendererHandle"],[3,"WGPURendererWeak"],[3,"WGPUSprite"],[3,"WGPUSpriteAtlasBuilder"],[3,"WGPUSpriteRenderTarget"],[3,"WindowWGPUDevice"]]},\
"riddle_time":{"doc":"Riddle crate supporting some basic game-centric time …","i":[[0,"ext","riddle_time","Types which are needed to use the time system independent …",null,null],[8,"TimeSystemExt","riddle_time::ext","",null,null],[10,"new_shared","","Create a new time system. The time the system is created …",0,[[],["timesystemhandle",3]]],[10,"process_frame","","Update the time system state, marking the beginning of a …",0,[[]]],[3,"TimeSystem","riddle_time","The Riddle time system core state.",null,null],[3,"TimeSystemHandle","","",null,null],[3,"TimeSystemWeak","","",null,null],[3,"TimerHandle","","A handle to a timer created by […",null,null],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"new_shared","","",1,[[],["timesystemhandle",3]]],[11,"process_frame","","",1,[[]]],[11,"clone","","",2,[[],["timesystemhandle",3]]],[11,"clone","","",3,[[],["timesystemweak",3]]],[11,"deref","","",2,[[],["timesystem",3]]],[11,"clone_handle","","",1,[[],["timesystemhandle",3]]],[11,"clone_weak_handle","","",1,[[],["timesystemweak",3]]],[11,"downgrade","","Downgrade this handle to a weak handle",2,[[["timesystemhandle",3]],["timesystemweak",3]]],[11,"eq","","Test whether two handles point to the same location in …",2,[[["timesystemhandle",3]],["bool",15]]],[11,"upgrade","","Upgrade a weak handle to a strong handle. Returns None if …",3,[[["timesystemweak",3]],[["option",4],["timesystemhandle",3]]]],[11,"fps","","Get the current FPS as calculated based on previous frame …",1,[[],["f32",15]]],[11,"delta_secs","","Get the current delta t as calculated based on previous …",1,[[],["f32",15]]],[11,"frame_instant","","Get the reference time for this frame. Captured during […",1,[[],["instant",3]]],[11,"register_timer","","Register a timer with a callback which will be fired when …",1,[[["duration",3]],["timerhandle",3]]],[11,"cancel","","Cancel a pending timer.",4,[[]]],[11,"pending","","Check whether a timer has yet to fire.",4,[[],["bool",15]]]],"p":[[8,"TimeSystemExt"],[3,"TimeSystem"],[3,"TimeSystemHandle"],[3,"TimeSystemWeak"],[3,"TimerHandle"]]}\
}');
initSearch(searchIndex);