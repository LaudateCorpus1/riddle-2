var searchIndex = JSON.parse('{\
"riddle":{"doc":"About Riddle","t":[13,4,13,13,13,13,13,13,13,13,3,4,3,3,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["AudioError","Event","FontError","ImageError","Input","InputError","Platform","PreRunPlaceholder","ProcessFrame","RendererError","RiddleContext","RiddleError","RiddleLib","RiddleState","WGPURendererError","WindowError","audio","audio","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","context","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","event","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","init","init","init","init","init","input","input","into","into","into","into","into","new","platform","platform","quit","run","run_with_err","source","state","state","time","time","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id"],"q":["riddle","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","Riddle main thread context. It can be accessed before the …","","Riddle library initializer","Riddle subsystem state handles","","","The audio system.","Audio system state","","","","","","","","","","","","","","Get a [<code>RiddleContext</code>] during program initialization, …","","","","","","","","","","","","","","","","Get the event associated with this context.","","","","","","","","","","","","","","","","","","","","The input system.","Input system state","","","","","","Initialize Riddle. All available subsystems will be …","The platform system.","Platform system state","Issue a quit request. The main loop will terminate once …","Begin the main event loop of the program.","Begin the main event loop of the program, with an Error …","","The Riddle state, allowing systems to be queried.","The system state which is thread safe, and which can be …","The time system.","Time system state","","","","","","","","","","","","","","","","",""],"i":[1,0,1,1,2,1,2,2,2,1,0,0,0,0,1,1,3,4,3,3,2,5,1,4,3,2,5,1,4,4,4,5,3,2,5,1,4,3,2,5,1,4,3,2,5,1,4,3,1,1,3,2,5,1,1,1,1,1,1,1,1,4,3,2,5,1,4,3,4,3,2,5,1,4,5,3,4,3,5,5,1,3,5,3,4,4,1,3,2,5,1,4,3,2,5,1,4,3,2,5,1,4],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["audiosystem",3]],[[],["audiosystem",3]],[[]],[[],["platformcontext",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["riddlestate",3]],[[]],[[],["riddlecontext",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["event",4]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["platformerror",4]]],[[["wgpurenderererror",4]]],[[["renderererror",4]]],[[["inputerror",4]]],[[["imageerror",4]]],[[["fonterror",4]]],[[["audioerror",4]]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["inputsystem",3]],[[],["inputsystem",3]],[[]],[[]],[[]],[[]],[[]],[[],[["riddleerror",4],["result",4]]],[[],["platformsystem",3]],[[],["platformsystem",3]],[[]],[[]],[[]],[[],[["option",4],["error",8]]],[[],["riddlestate",3]],[[],["riddlestate",3]],[[],["timesystem",3]],[[],["timesystem",3]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[4,"RiddleError"],[4,"Event"],[3,"RiddleContext"],[3,"RiddleState"],[3,"RiddleLib"]]},\
"riddle_audio":{"doc":"Riddle crate for loading and playing audio data.","t":[4,3,3,3,3,3,13,4,3,3,13,13,13,13,13,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,8,10,10],"n":["AudioError","AudioMainThreadState","AudioSystem","AudioSystemHandle","AudioSystemWeak","Clip","ClipDecodeError","ClipFormat","ClipPlayer","ClipPlayerBuilder","CommonError","InitFailed","Loop","OneShot","PlayError","PlayMode","Vorbis","Wav","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_handle","clone_into","clone_into","clone_into","clone_into","clone_into","clone_weak_handle","deref","downgrade","duration","eq","eq","ext","fade_volume","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","get_nominal_volume","get_observed_volume","into","into","into","into","into","into","into","into","into","into","load","load_async","new","new_shared","pause","paused","play","process_frame","resume","set_volume","source","stop","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upgrade","with_mode","with_volume","cause","cause","AudioSystemExt","new_shared","process_frame"],"q":["riddle_audio","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","riddle_audio::AudioError","","riddle_audio::ext","",""],"d":["","","The Riddle audio system core state.","","","Stores the raw data of an audio file.","","The set of support audio file formats which [<code>Clip</code>] can …","Handles playback of a [<code>Clip</code>] with support for pausing, …","Builder for [<code>ClipPlayer</code>]","","","Return to the beginning of the clip and play it again","Stop playing at the end of the clip","","Enum describing what the player should do at the end of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Downgrade this handle to a weak handle","Get the run time of the clip, if it can be determined.","Test whether two handles point to the same location in …","","Types which are needed to use the audio system …","Fade the volume from the current volume to the targat …","","","","","","","","","","","","","","","","Get the nominal volume of the player, which may not match …","Get the observed volume of the player, which is always …","","","","","","","","","","","Reads the entirety of the data reader in to memory.","Reads the entirety of the data reader in to memory, …","Make a new builder.","","Pauses playback of the clip.","Build the ClipPlayer in the paused state. […","Build the ClipPlayer, and start playing the clip …","","Example","Set the volume of playback immediately.","","Stops playback.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Upgrade a weak handle to a strong handle. Returns None if …","Set the playback mode of the player. Defaults to […","Set the playback volume of the player. Defaults to 1.0.","","","","Create the audio system, connected to the default audio …","Update the system’s state."],"i":[0,0,0,0,0,0,1,0,0,0,1,1,2,2,1,0,3,3,4,5,6,7,8,9,10,3,2,1,4,5,6,7,8,9,10,3,2,1,8,9,10,3,2,4,8,9,10,3,2,4,8,8,10,8,3,0,6,3,1,1,4,5,6,7,8,9,10,3,2,1,1,1,6,6,4,5,6,7,8,9,10,3,2,1,10,10,7,4,6,7,7,4,6,6,1,6,8,9,10,3,2,1,4,5,6,7,8,9,10,3,2,1,4,5,6,7,8,9,10,3,2,1,4,5,6,7,8,9,10,3,2,1,9,7,7,11,12,0,13,13],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["audiosystemhandle",3]],[[],["audiosystemweak",3]],[[],["clip",3]],[[],["clipformat",4]],[[],["playmode",4]],[[],["audiosystemhandle",3]],[[]],[[]],[[]],[[]],[[]],[[],["audiosystemweak",3]],[[],["audiosystem",3]],[[["audiosystemhandle",3]],["audiosystemweak",3]],[[],[["duration",3],["option",4]]],[[["audiosystemhandle",3]],["bool",15]],[[["clipformat",4]],["bool",15]],null,[[["duration",3],["f32",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["commonerror",4]]],[[]],[[["error",3]]],[[],["f32",15]],[[],["f32",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["clipformat",4]],[["clip",3],["result",4],["audioerror",4]]],[[["clipformat",4]]],[[["audiosystem",3]]],[[],[["result",4],["audioerror",4]]],[[]],[[["clip",3]],[["clipplayer",3],["result",4],["audioerror",4]]],[[["clip",3]],[["clipplayer",3],["result",4],["audioerror",4]]],[[]],[[]],[[["f32",15]]],[[],[["error",8],["option",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["audiosystemweak",3]],[["audiosystemhandle",3],["option",4]]],[[["playmode",4]]],[[["f32",15]]],null,null,null,[[],[["result",4],["audioerror",4]]],[[]]],"p":[[4,"AudioError"],[4,"PlayMode"],[4,"ClipFormat"],[3,"AudioSystem"],[3,"AudioMainThreadState"],[3,"ClipPlayer"],[3,"ClipPlayerBuilder"],[3,"AudioSystemHandle"],[3,"AudioSystemWeak"],[3,"Clip"],[13,"InitFailed"],[13,"PlayError"],[8,"AudioSystemExt"]]},\
"riddle_common":{"doc":"Riddle crate with miscelanious support functionality …","t":[18,18,8,3,8,8,13,4,18,16,13,18,18,18,18,18,16,18,18,18,12,12,11,11,11,11,11,10,11,10,10,11,11,14,11,0,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["BLACK","BLUE","CloneHandle","Color","ColorElement","ColorElementConversion","Common","CommonError","GREEN","Handle","IOError","RED","SATURATED","SATURATED","TRANSPARENT_BLACK","WHITE","WeakHandle","ZERO","ZERO","ZERO","a","b","borrow","borrow","borrow_mut","borrow_mut","clone","clone_handle","clone_into","clone_weak_handle","convert","convert","default","define_handles","eq","eventpub","fmt","fmt","fmt","from","from","from","from","from","g","into","into","into_rgba8","r","rgb","rgba","source","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","EventPub","EventSub","attach","borrow","borrow","borrow_mut","borrow_mut","collect","default","default","dispatch","from","from","into","into","new","new","new_with_filter","subscription_count","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["riddle_common","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","riddle_common::eventpub","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Opaque black","Opaque primary blue","Trait for objects that contain a weak reference to …","An RGBA color, parameterized over color channel type.","A type that represents a single channel in a color value.","Define the mapping between two ColorElement types.","","Errors common to many riddle crates","Opaque primary green","The type which represents a strong reference, and which …","","Opaque primary red","","","Transparent black","Opaque white","The type which represents a weak reference.","","","Transparent black","Alpha","Blue","","","","","","Clone a strong handle to the object.","","Clone a weak handle to the object.","Given a value that implements this trait, produce an …","","","Implement CloneHandle trait and define handle types for a …","","An event pubsub utility.","","","","","","","","","Green","","","Convert the color in to an RGBA32.","Red","Build an opaque color using rgb channels.","Build a color using all 4 channels.","","","","","","","","","","Event publisher which can have multiple subscribers.","An event subscriber which can filter incoming messages.","Attach a subscriber to the publisher.","","","","","Return all received events and clear the subscribers …","","","Send an event to all currently registered subscribers.","","","","","Create a new event publisher.","Create a new EventSub which accepts all events","Create a new EventSub which applies a filter on incoming …","The current count of attached subscribers.","","","","","",""],"i":[1,1,0,0,0,0,2,0,1,3,2,1,4,4,1,1,3,4,4,1,1,1,1,2,1,2,1,3,1,3,5,1,1,0,1,0,1,2,2,1,1,1,2,2,1,1,2,1,1,1,1,2,1,2,1,2,1,2,1,2,0,0,6,6,7,6,7,7,6,7,6,6,7,6,7,6,7,7,6,6,7,6,7,6,7],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["color",3]],[[]],[[]],[[]],[[]],[[],["color",3]],[[],["color",3]],null,[[],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["box",3],["error",8]]],[[]],null,[[]],[[]],[[],["u32",15]],null,[[]],[[]],[[],[["option",4],["error",8]]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[["eventsub",3]]],[[]],[[]],[[]],[[]],[[],["vec",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["u32",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[3,"Color"],[4,"CommonError"],[8,"CloneHandle"],[8,"ColorElement"],[8,"ColorElementConversion"],[3,"EventPub"],[3,"EventSub"]]},\
"riddle_font":{"doc":"Riddle crate for loading font files and rendering text to …","t":[13,4,13,13,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,12,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,10],"n":["CommonError","FontError","FontParseFailed","ImageError","ImgFont","ImgFontBuilder","ImgFontGenerator","ImgFontGlyph","ImgFontLayoutRule","TTFont","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","character","clone","clone","clone","clone_into","clone_into","clone_into","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","generate","glyphs","horizontal_spacing","image","init","init","init","init","init","init","init","into","into","into","into","into","into","into","layout","load","load_async","max_width","new","new","packing_size_policy","placement_offset","rect","render_simple","render_simple","rusttype_ext","rustype_font","source","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vertical_spacing","vertical_spacing","with_glyph","RustTypeTTFontExt","rustype_font"],"q":["riddle_font","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","riddle_font::rusttype_ext",""],"d":["","","","","Represents an image font, which is an Image containing …","A utility to construct an [<code>ImgFont</code>] given an image and a …","A utility for generating [<code>ImgFont</code>]s from [<code>TTFont</code>]s.","Details describing a glyph stored in an image font","Layout will happen relative to a (0,0) point representing …","Represents a parsed TTF file, and facilitates simple …","","","","","","","","","","","","","","","Take ownership of the given image, and finalize building …","The character that the glyph maps to.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Build the ImgFont for the given [<code>TTFont</code>] using the …","The mapping from [<code>char</code>] to glyphs registered with the …","The horizontal spacing between the left of this glyph and …","The image storing the glyph image data.","","","","","","","","","","","","","","","Layout a string using the font, relative to a (0,0) point …","Construct a new TTFont from a <code>Read</code> instance. The source …","Construct a new TTFont from an <code>AsyncRead</code> instance. The …","The maximum width the space.","Construct a new builder.","Create a new generator, specifying the set of characters …","Override the packing rule which controls how the …","Offset relative to to the expected location the glyph …","The part of the imgfont that contains this character.","Render a string to a [<code>riddle_image::Image</code>] using the font …","Render a string in this font to an image. It will only be …","Traits which expose underlying rusttype crates types","","","","","","","","","","","","","","","","","","","","","","","","","","","","This represents the distance, in pixels, between the top …","Set the vertical spacing of the font. See […","Register a glyph with the font. If more that one glyph is …","",""],"i":[1,0,1,1,0,0,0,0,0,0,2,3,4,1,5,6,7,2,3,4,1,5,6,7,6,5,5,6,7,5,6,7,5,6,7,2,3,4,1,5,6,7,2,3,4,1,5,6,7,2,3,4,1,5,6,7,1,1,5,6,2,3,4,1,1,1,1,5,6,7,7,2,5,2,2,3,4,1,5,6,7,2,3,4,1,5,6,7,2,4,4,3,6,7,7,5,5,2,4,0,4,1,5,6,7,1,2,3,4,1,5,6,7,2,3,4,1,5,6,7,2,3,4,1,5,6,7,2,6,6,0,8],"f":[null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["image",3]],["imgfont",3]],null,[[],["imgfontglyph",3]],[[],["imgfontbuilder",3]],[[],["imgfontgenerator",3]],[[]],[[]],[[]],[[],["imgfontglyph",3]],[[],["imgfontbuilder",3]],[[],["imgfontgenerator",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["error",3]]],[[["imageerror",4]]],[[["commonerror",4]]],[[]],[[]],[[]],[[["ttfont",3]],[["fonterror",4],["result",4],["imgfont",3]]],[[],["hashmap",3]],null,[[],["image",3]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["fnmut",8],["str",15]]],[[["read",8]],[["fonterror",4],["result",4]]],[[["asyncread",8],["unpin",8]]],null,[[]],[[["u32",15],["str",15]]],[[["imagepackersizepolicy",4]]],null,null,[[["str",15]],[["result",4],["image",3],["fonterror",4]]],[[["u32",15],["str",15]],[["result",4],["image",3],["fonterror",4]]],null,[[],["font",4]],[[],[["error",8],["option",4]]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["u32",15]],[[["u32",15]]],[[["imgfontglyph",3]]],null,[[],["font",4]]],"p":[[4,"FontError"],[3,"ImgFont"],[3,"ImgFontLayoutRule"],[3,"TTFont"],[3,"ImgFontGlyph"],[3,"ImgFontBuilder"],[3,"ImgFontGenerator"],[8,"RustTypeTTFontExt"]]},\
"riddle_image":{"doc":"Riddle crate for loading and manipulating image data in …","t":[18,18,13,3,13,18,3,4,4,13,13,18,18,13,18,18,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,8,10,10,13,3,4,3,4,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["BLACK","BLUE","Bmp","Color","CommonError","GREEN","Image","ImageError","ImageFormat","Jpeg","Png","RED","TRANSPARENT_BLACK","Unknown","WHITE","ZERO","a","as_rgba8","as_rgba8_mut","b","blit","blit_rect","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","byte_count","clone","clone","clone","clone_into","clone_into","clone_into","convert","copy_rect","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","derive_from_path","dimensions","drop","drop","drop","drop","eq","eq","fill","fill_rect","filters","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_bytes","g","get_pixel","height","image_ext","image_from_dynimage","image_rgbaimage","init","init","init","init","into","into","into","into","into_rgba8","load","load_async","new","packer","r","rect","rgb","rgba","save","set_pixel","source","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","width","distance_field","ImageImageExt","image_from_dynimage","image_rgbaimage","Fixed","ImagePacker","ImagePackerError","ImagePackerResult","ImagePackerSizePolicy","LinearSteps","NoSourceImages","Pow2Square","UnableToFitImages","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","default","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","image","init","init","init","init","into","into","into","into","ne","new","pack","padding","rects","size_policy","take_image","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id"],"q":["riddle_image","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","riddle_image::filters","riddle_image::image_ext","","","riddle_image::packer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Opaque black","Opaque primary blue","","An RGBA color, parameterized over color channel type.","","Opaque primary green","A representation of an image stored in main memory. The …","","The set of support image file formats which [<code>Image</code>] can …","","","Opaque primary red","Transparent black","","Opaque white","Transparent black","Alpha","Borrow the bytes representing the entire image, encoded …","Mutably borrow the bytes representing the entire image, …","Blue","Blit another image on to self. The location is the …","Blit a part of another image on to self. The location is …","","","","","","","","","Get the byte count of the entire image encoded as RGBA8","","","","","","","","Create a new image containing the contents of some part …","","","","","","","","","","Derive the image format from a path. It uses the file …","Dimension of the image in pixels","","","","","","","Fill the entire image with a certain color.","Fill a rect portion of the image with a given color.","","","","","","","","","","","","","","","","Load an image from a byte slice in the specified format.","Green","Get the color of the pixel at the given coordinates","Height of the image in pixels","Traits which expose underlying image crate’s types","","","","","","","","","","","Convert the color in to an RGBA32.","Load an image from a <code>Read</code> instance which emits image file …","Load an image from a <code>AsyncRead</code> instance which emits image …","Create a new image with the given dimensions, all pixels …","","Red","Get the bounding rect for the image, located at (0,0) and …","Build an opaque color using rgb channels.","Build a color using all 4 channels.","Save an image to a <code>Write</code> instance, emitting image file …","Set the color of the pixel at the given coordinates","","","","","","","","","","","","","","","","","","Width of the image in pixels","Generate a distance field for the given image using …","","","","The output image will initially be the supplied size, and …","Utility for packing multiple images to a single image.","","Packed images result, combining the generated image and …","Controls the initial size of the output packed image …","The output image will initially be the supplied value. If …","","The output image will initially be <code>[1, 1]</code>. If the images …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Borrow the image containing the packed image results.","","","","","","","","","","Create the ImagePacker, with default settings.","Pack the slice of images provides in to a single image …","The padding around each image in pixels.The gap between …","The locations of each of the supplied [<code>Image</code>]s in the …","Set the size policy for the packer. This controls how the …","Take the image, dropping the result.","","","","","","","","","","","","","",""],"i":[1,1,2,0,3,1,0,0,0,2,2,1,1,3,1,1,1,4,4,1,4,4,3,4,2,1,3,4,2,1,4,4,2,1,4,2,1,1,4,1,3,4,2,1,3,4,2,1,2,4,3,4,2,1,2,1,4,4,0,3,3,4,2,1,3,3,3,3,4,2,1,1,1,4,1,4,4,0,4,4,3,4,2,1,3,4,2,1,1,4,4,4,0,1,4,1,1,4,4,3,4,2,1,3,3,4,2,1,3,4,2,1,3,4,2,1,4,0,0,5,5,6,0,0,0,0,6,7,6,7,8,9,7,6,8,9,7,6,6,6,8,6,8,9,7,6,8,9,7,6,8,9,7,6,7,6,9,7,7,6,8,9,7,6,9,8,9,7,6,8,9,7,6,6,8,8,8,9,8,9,6,7,8,9,7,6,8,9,7,6,8,9,7,6],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],null,[[["i32",15],["image",3],["vector2",3]]],[[["rect",3],["image",3],["i32",15],["vector2",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["image",3]],[[],["imageformat",4]],[[],["color",3]],[[]],[[]],[[]],[[],["color",3]],[[["rect",3]],["image",3]],[[],["color",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["str",15]],["option",4]],[[],[["u32",15],["vector2",3]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["imageformat",4]],["bool",15]],[[["color",3]],["bool",15]],[[["colorelementconversion",8],["color",3]]],[[["u32",15],["colorelementconversion",8],["rect",3],["color",3]]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4]]],[[]],[[["error",3]]],[[["imageerror",4]]],[[["commonerror",4]]],[[]],[[]],[[]],[[],["color",3]],[[],["color",3]],[[["imageformat",4]],[["imageerror",4],["result",4]]],null,[[["into",8],["vector2",3]],[["u8",15],["color",3]]],[[],["u32",15]],null,[[["dynamicimage",4]]],[[],["rgbaimage",6]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[],["u32",15]],[[["imageformat",4],["read",8]],[["imageerror",4],["result",4]]],[[["imageformat",4]]],[[["u32",15]]],null,null,[[],[["u32",15],["rect",3]]],[[],["color",3]],[[],["color",3]],[[["imageformat",4],["write",8]],[["imageerror",4],["result",4]]],[[["colorelementconversion",8],["into",8],["vector2",3],["color",3]]],[[],[["error",8],["option",4]]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["u32",15]],[[["image",3],["f64",15]],["image",3]],null,[[["dynamicimage",4]]],[[],["rgbaimage",6]],null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["imagepackersizepolicy",4]],[[]],[[],["imagepacker",3]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["imagepackererror",4]],["bool",15]],[[["imagepackersizepolicy",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],["image",3]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[["imagepackersizepolicy",4]],["bool",15]],[[]],[[],[["imagepackererror",4],["imagepackerresult",3],["result",4]]],[[["u32",15]]],[[],["vec",3]],[[["imagepackersizepolicy",4]]],[[],["image",3]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[3,"Color"],[4,"ImageFormat"],[4,"ImageError"],[3,"Image"],[8,"ImageImageExt"],[4,"ImagePackerSizePolicy"],[4,"ImagePackerError"],[3,"ImagePacker"],[3,"ImagePackerResult"]]},\
"riddle_input":{"doc":"Riddle crate dealing with user input (keyboard, mouse, …","t":[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,13,4,13,13,13,13,3,13,13,13,13,13,13,13,13,13,4,4,3,3,3,3,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,13,13,13,13,13,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,13,13,13,13,13,13,13,13,13,13,13,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,8,10,10],"n":["A","A","Apostrope","Apostrope","B","B","Back","Backslash","Backslash","Backspace","Backspace","C","C","CapsLock","CapsLock","Comma","Comma","CursorMove","D","D","DPadDown","DPadLeft","DPadRight","DPadUp","Delete","Delete","Dot","Dot","Down","Down","E","E","East","Eight","Eight","End","End","Enter","Enter","Equal","Equal","Escape","Escape","F","F","F1","F1","F10","F10","F11","F11","F12","F12","F2","F2","F3","F3","F4","F4","F5","F5","F6","F6","F7","F7","F8","F8","F9","F9","Five","Five","Four","Four","G","G","GamePadAxis","GamePadAxisChanged","GamePadButton","GamePadButtonDown","GamePadButtonUp","GamePadConnected","GamePadDisconnected","GamePadId","Grave","Grave","H","H","Home","Home","I","I","InitError","InputError","InputEvent","InputMainThreadState","InputSystem","InputSystemHandle","InputSystemWeak","Insert","Insert","J","J","K","K","KeyDown","KeyPad0","KeyPad0","KeyPad1","KeyPad1","KeyPad2","KeyPad2","KeyPad3","KeyPad3","KeyPad4","KeyPad4","KeyPad5","KeyPad5","KeyPad6","KeyPad6","KeyPad7","KeyPad7","KeyPad8","KeyPad8","KeyPad9","KeyPad9","KeyPadAsterick","KeyPadAsterick","KeyPadDot","KeyPadDot","KeyPadEnter","KeyPadEnter","KeyPadEqual","KeyPadEqual","KeyPadMinus","KeyPadMinus","KeyPadPlus","KeyPadPlus","KeyPadPlusMinus","KeyPadPlusMinus","KeyUp","KeyboardModifiers","L","L","Left","Left","Left","LeftAlt","LeftAlt","LeftBrace","LeftBrace","LeftControl","LeftControl","LeftShift","LeftShift","LeftShoulder","LeftStick","LeftStickX","LeftStickY","LeftTrigger","LogicalPosition","M","M","Middle","Minus","Minus","MouseButton","MouseButtonDown","MouseButtonUp","N","N","Nine","Nine","NonUSBackslash","NonUSBackslash","North","NumLock","NumLock","O","O","One","One","Other","P","P","PageDown","PageDown","PageUp","PageUp","Q","Q","R","R","Right","Right","Right","RightAlt","RightAlt","RightBrace","RightBrace","RightShift","RightShift","RightShoulder","RightStick","RightStickX","RightStickY","RightTrigger","S","S","Scancode","ScrollLock","ScrollLock","Semicolon","Semicolon","Seven","Seven","Six","Six","Slash","Slash","South","Space","Space","Start","T","T","Tab","Tab","Three","Three","Two","Two","U","U","Unknown","Unknown","Unknown","Up","Up","V","V","VirtualKey","W","W","West","X","X","Y","Y","Z","Z","Zero","Zero","alt","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_handle","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_weak_handle","ctrl","default","deref","downgrade","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","ext","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","gamepad_axis_value","hash","hash","hash","hash","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_physical","is_gamepad_button_down","is_key_down","is_mouse_button_down","is_vkey_down","keyboard_modifiers","last_active_gamepad","mouse_pos","ne","ne","ne","ne","ne","new_shared","process_input","shift","take_input_events","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upgrade","x","y","axis","button","button","button","button","gamepad","gamepad","gamepad","modifiers","modifiers","position","scancode","scancode","value","vkey","vkey","window","window","window","window","window","InputSystemExt","new_shared","take_input_events"],"q":["riddle_inputriddle_input::InputEvent","","","","","","","","","","","","","","","","","","","","","riddle_input::ext","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","GamePad axis identifiers.","","GamePad Button identifiers.","","","","","An identifier mapping to a particular gamepad, used for …","","","","","","","","","","","","The portion of the input system that needs to remain on a …","The Riddle input system core state, along with […","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A snapshot of which keyboard modifiers are currently …","","","","","","","","","","","","","","","","","","","A 2d position in logical screen units.","","","","","","Mouse button identifiers.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Supported scancodes.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Supported virtual keys.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Downgrade this handle to a weak handle","","","","","Test whether two handles point to the same location in …","","","","","","Types which are needed to use the input system …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the value of a specific axis for a specific gamepad","","","","","","","","","","","","","","","","","","","Convert the position from logical units to physical pixel …","Check if a specific button is pressed for a given gamepad.","Query the keyboard scancode state with respect to a given …","Check if the specified mouse button is down with respect …","Query the keyboard virtual key state with respect to a …","The current state of keyboard modifiers with respect to a …","Get the [<code>GamePadId</code>] of the last gamepad which issued any …","Query the cursor position with respect to a given window.","","","","","","","Process all input sources, updating the static view of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Upgrade a weak handle to a strong handle. Returns None if …","","","","","","","","","","","","","","","","","","","","","","","","","Create the input system, initializing any input device …","Collect any buffered [<code>InputEvent</code>]s emitted by the input …"],"i":[1,2,1,2,1,2,3,1,2,1,2,1,2,1,2,1,2,4,1,2,3,3,3,3,1,2,1,2,1,2,1,2,3,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,0,4,0,4,4,4,4,0,1,2,1,2,1,2,1,2,5,0,0,0,0,0,0,1,2,1,2,1,2,4,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,4,0,1,2,6,1,2,1,2,1,2,1,2,1,2,3,3,7,7,3,0,1,2,6,1,2,0,4,4,1,2,1,2,1,2,3,1,2,1,2,1,2,6,1,2,1,2,1,2,1,2,1,2,6,1,2,1,2,1,2,1,2,3,3,7,7,3,1,2,0,1,2,1,2,1,2,1,2,1,2,3,1,2,3,1,2,1,2,1,2,1,2,1,2,5,1,2,1,2,1,2,0,1,2,3,1,2,1,2,1,2,1,2,8,9,10,5,4,11,3,7,12,13,8,14,6,1,2,9,10,5,4,11,3,7,12,13,8,14,6,1,2,4,11,3,7,12,13,8,14,6,1,2,9,4,11,3,7,12,13,8,14,6,1,2,9,8,14,12,12,4,11,3,7,12,8,14,6,1,2,0,5,5,4,11,3,7,8,14,6,1,2,9,10,5,4,11,11,3,7,12,13,8,14,14,14,6,1,1,2,9,11,3,7,6,9,10,5,4,11,3,7,12,13,8,14,6,1,2,14,9,9,9,9,9,9,9,4,11,8,14,6,9,10,8,9,4,11,3,7,12,13,8,14,6,1,2,5,9,10,5,4,11,3,3,7,7,12,13,8,14,6,1,2,9,10,5,4,11,3,7,12,13,8,14,6,1,2,9,10,5,4,11,3,7,12,13,8,14,6,1,2,13,14,14,15,16,17,18,19,18,19,15,20,21,22,20,21,15,20,21,22,16,17,20,21,0,23,23],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["inputevent",4]],[[],["gamepadid",3]],[[],["gamepadbutton",4]],[[],["gamepadaxis",4]],[[],["inputsystemhandle",3]],[[],["inputsystemweak",3]],[[],["keyboardmodifiers",3]],[[],["logicalposition",3]],[[],["mousebutton",4]],[[],["scancode",4]],[[],["virtualkey",4]],[[],["inputsystemhandle",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["inputsystemweak",3]],null,[[],["logicalposition",3]],[[],["inputsystem",3]],[[["inputsystemhandle",3]],["inputsystemweak",3]],[[["inputevent",4]],["bool",15]],[[["gamepadid",3]],["bool",15]],[[["gamepadbutton",4]],["bool",15]],[[["gamepadaxis",4]],["bool",15]],[[["inputsystemhandle",3]],["bool",15]],[[["keyboardmodifiers",3]],["bool",15]],[[["logicalposition",3]],["bool",15]],[[["mousebutton",4]],["bool",15]],[[["scancode",4]],["bool",15]],[[["virtualkey",4]],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[]],[[]],[[]],[[]],[[]],[[["gamepadid",3]]],[[]],[[]],[[]],[[]],[[]],[[["u32",15],["vector2",3]],["logicalposition",3]],[[]],[[["logicalvec2",3]],["logicalposition",3]],[[]],[[]],[[["u32",15]],["scancode",4]],[[]],[[["gamepadid",3],["gamepadaxis",4]],["f32",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["gamepadid",3],["gamepadbutton",4]],["bool",15]],[[["windowid",3],["scancode",4]],["bool",15]],[[["windowid",3],["mousebutton",4]],["bool",15]],[[["windowid",3],["virtualkey",4]],["bool",15]],[[["windowid",3]],["keyboardmodifiers",3]],[[],[["option",4],["gamepadid",3]]],[[["windowid",3]],["logicalposition",3]],[[["inputevent",4]],["bool",15]],[[["gamepadid",3]],["bool",15]],[[["keyboardmodifiers",3]],["bool",15]],[[["logicalposition",3]],["bool",15]],[[["mousebutton",4]],["bool",15]],[[["eventpub",3]],[["inputerror",4],["result",4]]],[[]],null,[[],[["inputevent",4],["vec",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["button",4]],[["result",4],["button",4]]],[[],["result",4]],[[],["result",4]],[[["axis",4]],[["result",4],["axis",4]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["inputsystemweak",3]],[["option",4],["inputsystemhandle",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["eventpub",3]],[["inputerror",4],["result",4]]],[[],[["inputevent",4],["vec",3]]]],"p":[[4,"Scancode"],[4,"VirtualKey"],[4,"GamePadButton"],[4,"InputEvent"],[4,"InputError"],[4,"MouseButton"],[4,"GamePadAxis"],[3,"KeyboardModifiers"],[3,"InputSystem"],[3,"InputMainThreadState"],[3,"GamePadId"],[3,"InputSystemHandle"],[3,"InputSystemWeak"],[3,"LogicalPosition"],[13,"GamePadAxisChanged"],[13,"MouseButtonDown"],[13,"MouseButtonUp"],[13,"GamePadButtonDown"],[13,"GamePadButtonUp"],[13,"KeyDown"],[13,"KeyUp"],[13,"CursorMove"],[8,"InputSystemExt"]]},\
"riddle_math":{"doc":"Riddle crate supplying basic math types and utilities to …","t":[3,8,8,8,3,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,12,12],"n":["Rect","SignedSpacialNumeric","SpacialNumeric","SpacialNumericConversion","Vector2","add","add_assign","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","contains_point","convert","convert","convert","default","default","dimensions","eq","eq","fmt","fmt","from","from","from","from","from","intersect","intersect_relative_to_both","into","into","location","magnitude_squared","max_point","min_point","mul","neg","new","new","sub","sub_assign","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vec2","x","y"],"q":["riddle_math","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["An axis aligned 2d rectangle with both a location and …","Types which as well as being defined as SpacialNumeric, …","Numeric types over which [<code>crate::Rect</code>] and [<code>crate::Vector2</code>…","Define the conversion between two SpacialNumeric types.","A basic 2d vector, supporting a small selection of …","","","","","","","","","","","Test to see whether a point lies within the rect.","Convert one SpacialNumeric value to another. This …","","","","","The size of the rectangle","","","","","","","","","","Get the intersection rect of two rectangles, if one exists","Given the dimensions of two rects, and the relative …","","","The coordinates of the min point of the rectangle.","Calculate the square of the magnitude of the vector","Get the max point of the rect","Get the min point of the rect, the same as its location","","","Create a new rect","Create a vector with the given coordinatates.","","","","","","","","","","","Utility function to abbreviate [<code>Vector2</code>] creation","",""],"i":[0,0,0,0,0,1,1,2,1,2,1,2,1,2,1,2,3,2,1,2,1,2,2,1,2,1,2,1,1,1,1,2,2,2,1,2,1,2,2,1,1,2,1,1,1,2,1,2,1,2,1,2,1,0,1,1],"f":[null,null,null,null,null,[[["vector2",3]]],[[["vector2",3]]],[[]],[[]],[[]],[[]],[[],["rect",3]],[[],["vector2",3]],[[]],[[]],[[["vector2",3]],["bool",15]],[[]],[[],["rect",3]],[[],["vector2",3]],[[],["rect",3]],[[]],null,[[],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["vec2",3]]],[[]],[[["vector2",3]]],[[]],[[],["option",4]],[[["vector2",3],["vector2",3],["spacialnumericconversion",8]],["option",4]],[[]],[[]],null,[[]],[[],["vector2",3]],[[],["vector2",3]],[[]],[[]],[[["into",8],["vector2",3]]],[[]],[[["vector2",3]]],[[["vector2",3]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["vector2",3]],null,null],"p":[[3,"Vector2"],[3,"Rect"],[8,"SpacialNumericConversion"]]},\
"riddle_platform_common":{"doc":"Riddle crate containing common utilities and types needed …","t":[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,3,3,13,13,13,13,13,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,13,13,13,3,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,8,10],"n":["A","A","Apostrope","Apostrope","B","B","Backslash","Backslash","Backspace","Backspace","C","C","CapsLock","CapsLock","Comma","Comma","CursorMove","D","D","Delete","Delete","Dot","Dot","Down","Down","E","E","Eight","Eight","End","End","Enter","Enter","Equal","Equal","Escape","Escape","EventQueueEmpty","F","F","F1","F1","F10","F10","F11","F11","F12","F12","F2","F2","F3","F3","F4","F4","F5","F5","F6","F6","F7","F7","F8","F8","F9","F9","Five","Five","Four","Four","G","G","Grave","Grave","H","H","Home","Home","I","I","Insert","Insert","J","J","K","K","KeyDown","KeyPad0","KeyPad0","KeyPad1","KeyPad1","KeyPad2","KeyPad2","KeyPad3","KeyPad3","KeyPad4","KeyPad4","KeyPad5","KeyPad5","KeyPad6","KeyPad6","KeyPad7","KeyPad7","KeyPad8","KeyPad8","KeyPad9","KeyPad9","KeyPadAsterick","KeyPadAsterick","KeyPadDot","KeyPadDot","KeyPadEnter","KeyPadEnter","KeyPadEqual","KeyPadEqual","KeyPadMinus","KeyPadMinus","KeyPadPlus","KeyPadPlus","KeyPadPlusMinus","KeyPadPlusMinus","KeyUp","L","L","Left","Left","Left","LeftAlt","LeftAlt","LeftBrace","LeftBrace","LeftControl","LeftControl","LeftShift","LeftShift","LogicalPosition","LogicalSize","LogicalVec2","M","M","Middle","Minus","Minus","MouseButton","MouseButtonDown","MouseButtonUp","N","N","Nine","Nine","NonUSBackslash","NonUSBackslash","NumLock","NumLock","O","O","One","One","Other","P","P","PageDown","PageDown","PageUp","PageUp","PlatformEvent","Q","Q","R","R","Right","Right","Right","RightAlt","RightAlt","RightBrace","RightBrace","RightShift","RightShift","S","S","Scancode","ScrollLock","ScrollLock","Semicolon","Semicolon","Seven","Seven","Six","Six","Slash","Slash","Space","Space","T","T","Tab","Tab","Three","Three","Two","Two","U","U","Unknown","Unknown","Unknown","Up","Up","V","V","VirtualKey","W","W","WindowClose","WindowId","WindowResize","X","X","Y","Y","Z","Z","Zero","Zero","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","hash","hash","height","into","into","into","into","into","into","into","into","into_physical","into_physical","into_physical","ne","ne","ne","ne","ne","ne","new","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","traits","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","width","x","x","y","y","button","button","platform_scancode","platform_scancode","position","scancode","scancode","vkey","vkey","window","window","window","window","window","WindowCommon","logical_to_physical"],"q":["riddle_platform_commonriddle_platform_common::PlatformEvent","","","","","","","","","","","","","","riddle_platform_common::traits",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A 2d position in logical screen units.","A 2d size in logical screen units.","A 2d vector in logical screen units.","","","","","","Mouse button identifiers.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Supported scancodes.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Supported virtual keys.","","","","A platform system independent window identifier.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convert the size from logical units to physical pixel …","Convert the position from logical units to physical pixel …","Convert the vector from logical units to physical pixel …","","","","","","","","","","","","","","","","Traits needed in order to implement a riddle compatible …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Functionality Window types need in order to be able to …","Convert a logical vec2 in to a physical pixel unit (x,y) …"],"i":[1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,1,2,4,1,2,1,2,1,2,1,2,1,2,0,0,0,1,2,4,1,2,0,3,3,1,2,1,2,1,2,1,2,1,2,1,2,4,1,2,1,2,1,2,0,1,2,1,2,4,1,2,1,2,1,2,1,2,1,2,0,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,1,2,1,2,1,2,0,1,2,3,0,3,1,2,1,2,1,2,1,2,5,6,7,3,4,1,2,8,5,6,7,3,4,1,2,8,5,6,7,3,4,1,2,8,5,6,7,3,4,1,2,8,6,5,6,7,3,4,1,2,8,5,6,7,4,1,2,8,5,5,5,6,6,6,7,7,7,7,3,4,1,1,2,8,4,8,5,5,6,7,3,4,1,2,8,5,6,7,5,6,7,3,4,8,8,5,6,7,3,4,1,2,8,0,5,6,7,3,4,1,2,8,5,6,7,3,4,1,2,8,5,6,7,3,4,1,2,8,5,6,7,6,7,9,10,11,12,13,11,12,11,12,13,9,10,11,12,0,14],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["logicalsize",3]],[[],["logicalposition",3]],[[],["logicalvec2",3]],[[],["platformevent",4]],[[],["mousebutton",4]],[[],["scancode",4]],[[],["virtualkey",4]],[[],["windowid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["logicalsize",3]],["bool",15]],[[["logicalposition",3]],["bool",15]],[[["logicalvec2",3]],["bool",15]],[[["platformevent",4]],["bool",15]],[[["mousebutton",4]],["bool",15]],[[["scancode",4]],["bool",15]],[[["virtualkey",4]],["bool",15]],[[["windowid",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["logicalvec2",3]]],[[]],[[["vector2",3],["u32",15]]],[[]],[[["logicalvec2",3]]],[[["vector2",3],["u32",15]]],[[["vector2",3],["u32",15]]],[[]],[[["logicalposition",3]]],[[["logicalsize",3]]],[[]],[[]],[[]],[[["u32",15]]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["logicalsize",3]],["bool",15]],[[["logicalposition",3]],["bool",15]],[[["logicalvec2",3]],["bool",15]],[[["platformevent",4]],["bool",15]],[[["mousebutton",4]],["bool",15]],[[["windowid",3]],["bool",15]],[[["u32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["logicalvec2",3],["into",8]]]],"p":[[4,"Scancode"],[4,"VirtualKey"],[4,"PlatformEvent"],[4,"MouseButton"],[3,"LogicalSize"],[3,"LogicalPosition"],[3,"LogicalVec2"],[3,"WindowId"],[13,"MouseButtonDown"],[13,"MouseButtonUp"],[13,"KeyDown"],[13,"KeyUp"],[13,"CursorMove"],[8,"WindowCommon"]]},\
"riddle_platform_winit":{"doc":"Riddle platform system implementation based on <code>winit</code>, …","t":[13,13,13,13,13,13,13,13,3,4,4,3,3,3,3,13,13,3,3,13,3,13,13,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,8,10,8,10],"n":["CursorMove","EventQueueEmpty","InvalidContextState","KeyDown","KeyUp","MessageDispatchError","MouseButtonDown","MouseButtonUp","PlatformContext","PlatformError","PlatformEvent","PlatformMainThreadState","PlatformSystem","PlatformSystemHandle","PlatformSystemWeak","Unknown","Unknown","Window","WindowBuilder","WindowClose","WindowHandle","WindowInitFailure","WindowResize","WindowWeak","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_context","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","clone","clone","clone","clone","clone","clone_handle","clone_handle","clone_into","clone_into","clone_into","clone_into","clone_into","clone_weak_handle","clone_weak_handle","cursor_visible","default","deref","deref","dimensions","downgrade","downgrade","drop","eq","eq","eq","eq","event","event_pub","ext","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","id","into","into","into","into","into","into","into","into","into","into","into","logical_size","logical_to_physical","lookup_window","ne","new","new_shared","physical_size","quit","raw_window_handle","resizeable","run","scale_factor","set_title","subscribe_to_events","system","title","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upgrade","upgrade","winit_ext","winit_window","button","button","platform_scancode","platform_scancode","position","scancode","scancode","vkey","vkey","window","window","window","window","window","PlatformSystemExt","new_shared","WinitWindowExt","winit_window"],"q":["riddle_platform_winit","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","riddle_platform_winit::PlatformEvent","","","","","","","","","","","","","","riddle_platform_winit::ext","","riddle_platform_winit::winit_ext",""],"d":["","","","","","","","","The platform system context provided to the application …","","","","The winit platform system core state, along with […","","","","","A platform native window.","Builder for [<code>Window</code>] instances.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Build the new window, returning a handle to the new …","","","","","","","","","","","","","","","Set whether the system cursor will be displayed for the …","","","","Set the dimensions of the window, in logical units.","Downgrade this handle to a weak handle","Downgrade this handle to a weak handle","","","Test whether two handles point to the same location in …","Test whether two handles point to the same location in …","","Get the event associated with the context.","Get the [<code>PlatformEvent</code>] publisher, so that other systems …","Types which are needed to use the input system …","","","","","","","","","","","","","","The window id which is used to identify this window in […","","","","","","","","","","","","Get the size of the drawable area of the window in …","","Get a [<code>WindowHandle</code>] associated with a [<code>WindowId</code>], if one …","","","","Get the size of the drawable area of the window in pixels","Issue a quit request to the underlying platform system.","","Set whether the window is resizeable.","Starts the main even loop for this window system.","Get the scale factor of the window, based on how the …","Set the window title","Attach a subscriber to the subset of platform events that …","The platform system associated with this context.","Set the window’s title.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Upgrade a weak handle to a strong handle. Returns None if …","Upgrade a weak handle to a strong handle. Returns None if …","Traits which expose underlying winit crate’s types","","","","","","","","","","","","","","","","","Create a new platform system and its main thread state …","",""],"i":[1,1,2,1,1,2,1,1,0,0,0,0,0,0,0,2,1,0,0,1,0,2,1,0,3,4,5,6,7,2,8,9,10,11,1,5,3,4,5,6,7,2,8,9,10,11,1,7,8,9,10,11,1,4,6,8,9,10,11,1,4,6,7,7,8,10,7,8,10,6,6,8,10,1,3,4,0,2,2,3,4,5,6,7,2,8,9,10,11,1,6,3,4,5,6,7,2,8,9,10,11,1,6,6,4,1,7,4,6,3,6,7,5,6,6,6,3,7,8,9,10,11,1,2,3,4,5,6,7,2,8,9,10,11,1,3,4,5,6,7,2,8,9,10,11,1,3,4,5,6,7,2,8,9,10,11,1,9,11,0,6,12,13,14,15,16,14,15,14,15,16,12,13,14,15,0,17,0,18],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["platformcontext",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["platformerror",4],["result",4],["windowhandle",3]]],[[],["platformsystemhandle",3]],[[],["platformsystemweak",3]],[[],["windowhandle",3]],[[],["windowweak",3]],[[],["platformevent",4]],[[],["platformsystemhandle",3]],[[],["windowhandle",3]],[[]],[[]],[[]],[[]],[[]],[[],["platformsystemweak",3]],[[],["windowweak",3]],[[["bool",15]]],[[]],[[],["platformsystem",3]],[[],["window",3]],[[["u32",15]]],[[["platformsystemhandle",3]],["platformsystemweak",3]],[[["windowhandle",3]],["windowweak",3]],[[]],[[],["bool",15]],[[["platformsystemhandle",3]],["bool",15]],[[["windowhandle",3]],["bool",15]],[[["platformevent",4]],["bool",15]],[[],["platformevent",4]],[[],["eventpub",3]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["windowid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["logicalsize",3]],[[["into",8],["logicalvec2",3]]],[[["windowid",3]],[["option",4],["windowhandle",3]]],[[["platformevent",4]],["bool",15]],[[]],[[]],[[]],[[],[["result",4],["platformerror",4]]],[[],["rawwindowhandle",4]],[[["bool",15]]],[[]],[[],["f64",15]],[[["str",15]]],[[["eventsub",3]]],[[],["platformsystem",3]],[[["string",3],["into",8]]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["platformsystemweak",3]],[["platformsystemhandle",3],["option",4]]],[[["windowweak",3]],[["option",4],["windowhandle",3]]],null,[[],["window",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],null,[[],["window",3]]],"p":[[4,"PlatformEvent"],[4,"PlatformError"],[3,"PlatformContext"],[3,"PlatformSystem"],[3,"PlatformMainThreadState"],[3,"Window"],[3,"WindowBuilder"],[3,"PlatformSystemHandle"],[3,"PlatformSystemWeak"],[3,"WindowHandle"],[3,"WindowWeak"],[13,"MouseButtonDown"],[13,"MouseButtonUp"],[13,"KeyDown"],[13,"KeyUp"],[13,"CursorMove"],[8,"PlatformSystemExt"],[8,"WinitWindowExt"]]},\
"riddle_renderer_common":{"doc":"Riddle crate containing providing the common API to which …","t":[8,8,4,13,13,8,16,3,4,16,16,3,16,3,3,16,13,12,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,10,10,10,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,10,12,10,10,11,11,11,11,11,10,12,10,12,10,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,12,11,11,11,11,11,3,11,11,11,11,12,11,11,11,11,11,11,12,11,11,11,11,11,12],"n":["CommonRenderer","CommonSprite","FilterMode","Linear","Nearest","RenderContext","RenderContext","Renderable","RendererError","Shader","Sprite","SpriteFont","SpriteFont","SpriteInitArgs","SpriteRenderArgs","Texture","Unknown","angle","at","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clone","clone","clone","clone_into","clone_into","clone_into","default","default","default","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","diffuse_color","dimensions","dimensions","draw","drop","drop","drop","drop","drop","drop","eq","eq","fill_rect","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","indices","init","init","init","init","init","init","into","into","into","into","into","into","location","mag_filter","min_filter","ne","new","new","new","new_from_image","pivot","present","render","render","render","render","render_at","render_at","render_regions","scale","set_transform","shader","subsprite","texture","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vertex","verts","with_angle","with_color","with_filter_modes","with_pivot","with_scale","Vertex","borrow","borrow_mut","clone","clone_into","color","deref","deref_mut","drop","from","init","into","pos","ptc","to_owned","try_from","try_into","type_id","uv"],"q":["riddle_renderer_common","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","riddle_renderer_common::vertex","","","","","","","","","","","","","","","","","",""],"d":["The root object of a renderer implementation, associated …","Sprites are conceptually both a reference to an image, …","","","","The context provided to render callbacks","","","","","","An efficient [<code>riddle_font::ImgFont</code>] renderer.","","","","","","","Set the location of the sprite, specifying where the …","","","","","","","","","","","","","Fill the target with a flat color.","","","","","","","","","","","","","","","","","","","","","","","","Get the dimensions of the sprite","Draw a <code>Renderable</code> to the target with the current world …","","","","","","","","","Draw a solid rect with the given color.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Build a SpriteFont from the ImgFont given. The ImgFont’…","Create a new default init args.","New render args, with defaults, at the specified location","Construct a new sprite from an image. The image contents …","","Consume the context and present any outstanding draw …","","Render the entire sprite.","Render the entire sprite.","","Utility function to simply render the sprite at a given …","Utility function to simply render the sprite at a given …","Render multiple sub regions of the sprite at once.","","Replace the current world transform.","","Build a sprite that shares the same underlying texture …","","","","","","","","","","","","","","","","","","","","","","","","","","Set the angle at which the sprite will be rendered, in …","Set the diffuse color of the sprite, which will be …","Specify the min and mag filters used when rendering the …","Set the pivot of the sprite, relative to the top left of …","Set the scale at which the sprite will be rendered","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,1,1,0,2,0,0,2,2,0,2,0,0,2,3,4,4,5,6,1,7,4,3,5,6,1,7,4,3,8,1,7,4,1,7,4,1,7,4,5,6,1,7,4,3,5,6,1,7,4,3,4,2,9,8,5,6,1,7,4,3,1,7,8,1,7,4,3,3,5,6,1,7,4,3,5,5,6,1,7,4,3,5,6,1,7,4,3,4,7,7,7,6,7,4,9,4,8,2,9,9,6,9,9,9,4,8,5,9,5,1,7,4,3,5,6,1,7,4,3,5,6,1,7,4,3,5,6,1,7,4,3,0,5,4,4,7,4,4,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["vector2",3],["into",8]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["color",3],["f32",15]],[["result",4],["renderererror",4]]],[[],["filtermode",4]],[[],["spriteinitargs",3]],[[],["spriterenderargs",3]],[[]],[[]],[[]],[[]],[[],["spriteinitargs",3]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],null,[[],[["vector2",3],["f32",15]]],[[],[["vector2",3],["f32",15]]],[[["renderable",3]],[["result",4],["renderererror",4]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["filtermode",4]],["bool",15]],[[["spriteinitargs",3]],["bool",15]],[[["rect",3],["color",3],["f32",15]],[["result",4],["renderererror",4]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[["spriteinitargs",3]],["bool",15]],[[["imgfont",3]],[["result",4],["renderererror",4]]],[[]],[[["vector2",3],["into",8]]],[[["image",3],["spriteinitargs",3]],[["result",4],["renderererror",4]]],null,[[],[["result",4],["renderererror",4]]],[[],[["result",4],["renderererror",4]]],[[["spriterenderargs",3]],[["result",4],["renderererror",4]]],[[["spriterenderargs",3]],[["result",4],["renderererror",4]]],[[["str",15],["spriterenderargs",3]],[["result",4],["renderererror",4]]],[[["vector2",3],["f32",15]],[["result",4],["renderererror",4]]],[[["vector2",3],["f32",15]],[["result",4],["renderererror",4]]],[[["spriterenderargs",3]],[["result",4],["renderererror",4]]],null,[[["f32",15],["columnmatrix4",3]],[["result",4],["renderererror",4]]],null,[[["rect",3]]],null,[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[["f32",15]]],[[["color",3],["f32",15]]],[[["filtermode",4]]],[[["vector2",3],["into",8]]],[[["vector2",3],["into",8]]],null,[[]],[[]],[[],["vertex",3]],[[]],null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],null,[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null],"p":[[4,"FilterMode"],[8,"CommonRenderer"],[4,"RendererError"],[3,"SpriteRenderArgs"],[3,"Renderable"],[3,"SpriteFont"],[3,"SpriteInitArgs"],[8,"RenderContext"],[8,"CommonSprite"],[3,"Vertex"]]},\
"riddle_renderer_wgpu":{"doc":"Riddle simple sprite-based renderer built on <code>wgpu</code>.","t":[13,13,13,8,8,6,4,13,13,13,8,16,3,3,13,4,16,3,16,3,3,16,3,3,3,16,13,13,8,3,4,3,12,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,10,10,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,10,11,11,12,10,12,10,11,11,11,11,11,10,11,12,10,12,11,11,10,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,12,10,11,11,11,11,10,11,11,11,10,11,11,11,11,3,11,11,11,11,12,11,11,11,11,11,11,12,11,11,11,11,11,12],"n":["APIInitError","BeginRenderError","CommonError","CommonRenderer","CommonSprite","DefaultRenderer","FilterMode","ImageError","Linear","Nearest","RenderContext","RenderContext","Renderable","Renderer","RendererCommonError","RendererError","Shader","Sprite","Sprite","SpriteAtlasBuilder","SpriteFont","SpriteFont","SpriteInitArgs","SpriteRenderArgs","SpriteRenderTarget","Texture","Unknown","Unknown","WGPUDevice","WGPUDeviceInfo","WGPURendererError","WindowWGPUDevice","angle","at","begin_frame","begin_frame","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","clear","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","device","diffuse_color","dimensions","dimensions","dimensions","dimensions","dimensions","draw","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","end_frame","end_frame","eq","eq","equivalent","equivalent","fill_rect","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","indices","init","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","into","location","mag_filter","min_filter","ne","new","new","new","new","new","new","new_from_device","new_from_image","new_from_image","new_from_window","pivot","present","queue","render","render","render","render","render","render_at","render_regions","render_regions","scale","set_transform","shader","source","sprite","subsprite","subsprite","texture","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vertex","verts","viewport_dimensions","viewport_dimensions","wgpu_device","with_angle","with_color","with_device_info","with_device_info","with_filter_modes","with_filter_modes","with_frame","with_frame","with_image","with_pivot","with_scale","Vertex","borrow","borrow_mut","clone","clone_into","color","deref","deref_mut","drop","from","init","into","pos","ptc","to_owned","try_from","try_into","type_id","uv"],"q":["riddle_renderer_wgpuriddle_renderer_wgpu::vertex","","","","","","","","","","","","","","","","","",""],"d":["","","","The root object of a renderer implementation, associated …","Sprites are conceptually both a reference to an image, …","","","","","","The context provided to render callbacks","","","A simple 2D sprite based renderer.","","","","A renderable region of a texture.","","Construct a set of [<code>Sprite</code>]s from a set of […","An efficient [<code>riddle_font::ImgFont</code>] renderer.","","","","A target which can be both rendered to and referenced as …","","","","A [<code>Renderer</code>] compatible WGPU device.","","","A standard Renderer WGPU device used with …","","Set the location of the sprite, specifying where the …","Called when the [<code>Renderer</code>] begins rendering to the swap …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Construct the atlas texture from the given set of images, …","Fill the target with a flat color.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the dimensions of the sprite","Get the frame dimensions as reported by the [<code>WGPUDevice</code>].","","","Draw a <code>Renderable</code> to the target with the current world …","","","","","","","","","","","","","","When the renderer is done renderering to the swap chain …","","","","","","Draw a solid rect with the given color.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A new empty atlas builder","Create a new render target with the specified dimensions","","Build a SpriteFont from the ImgFont given. The ImgFont’…","Create a new default init args.","New render args, with defaults, at the specified location","Or the renderer can be built on top of existing WGPU …","Construct a new sprite from an image. The image contents …","","Initialize a new Renderer, creating a WGPU device for the …","","Consume the context and present any outstanding draw …","","","","Get a render context for the current swap chain frame.","Render the entire sprite.","","Utility function to simply render the sprite at a given …","Render multiple sub regions of the sprite at once.","","","Replace the current world transform.","","","Get the sprite which can be used to render the contents …","Build a sprite that shares the same underlying texture …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The viewport dimensions of the swapchain frame.","","","Set the angle at which the sprite will be rendered, in …","Set the diffuse color of the sprite, which will be …","Provides a reference to the set of wgpu device state for …","","Specify the min and mag filters used when rendering the …","Specify the min and mag filters used when rendering the …","Provide a reference to the current swap chain frame for …","","Add an image to be packed in to the atlas, along with a …","Set the pivot of the sprite, relative to the top left of …","Set the scale at which the sprite will be rendered","","","","","","","","","","","","","","","","","","",""],"i":[1,1,1,0,0,0,0,1,2,2,0,3,0,0,1,0,3,0,3,0,0,3,0,0,0,3,1,4,0,0,0,0,5,5,6,7,8,9,10,11,12,7,1,13,14,2,15,5,4,8,9,10,11,12,7,1,13,14,2,15,5,4,11,16,9,2,15,5,9,2,15,5,11,2,15,5,8,9,10,11,12,7,1,13,14,2,15,5,4,8,9,10,11,12,7,1,13,14,2,15,5,4,8,5,3,17,9,9,10,16,8,9,10,11,12,7,1,13,14,2,15,5,4,6,7,2,15,2,15,16,1,1,2,15,5,4,4,8,9,10,11,12,7,1,1,1,1,13,14,2,15,5,4,4,13,8,9,10,11,12,7,1,13,14,2,15,5,4,8,9,10,11,12,7,1,13,14,2,15,5,4,5,15,15,15,11,12,7,14,15,5,9,17,10,9,5,16,8,3,9,12,17,14,17,17,10,5,16,13,1,12,17,10,13,9,2,15,5,1,4,8,9,10,11,12,7,1,13,14,2,15,5,4,8,9,10,11,12,7,1,13,14,2,15,5,4,8,9,10,11,12,7,1,13,14,2,15,5,4,0,13,6,7,9,5,5,6,7,11,15,6,7,11,5,5,0,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["spriterenderargs",3]],[[],[["result",4],["wgpurenderererror",4]]],[[],[["result",4],["wgpurenderererror",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["renderer",3]],[["result",4],["wgpurenderererror",4]]],[[["f32",15],["color",3]],[["result",4],["renderererror",4]]],[[]],[[],["filtermode",4]],[[],["spriteinitargs",3]],[[],["spriterenderargs",3]],[[]],[[]],[[]],[[]],[[]],[[],["filtermode",4]],[[],["spriteinitargs",3]],[[],["spriterenderargs",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],null,null,[[],[["vector2",3],["f32",15]]],[[],[["vector2",3],["f32",15]]],[[],[["vector2",3],["f32",15]]],[[],[["vector2",3],["f32",15]]],[[],[["vector2",3],["f32",15]]],[[["renderable",3]],[["result",4],["renderererror",4]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[["filtermode",4]],["bool",15]],[[["spriteinitargs",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["color",3],["rect",3],["f32",15]],[["result",4],["renderererror",4]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["commonerror",4]]],[[["renderererror",4]]],[[["imageerror",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["wgpurenderererror",4]]],[[]],null,[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[["spriteinitargs",3]],["bool",15]],[[]],[[["u32",15],["vector2",3],["renderer",3]],[["result",4],["wgpurenderererror",4]]],[[["window",3]],[["result",4],["wgpurenderererror",4]]],[[["imgfont",3]],[["spritefont",3],["renderererror",4],["result",4]]],[[],["spriteinitargs",3]],[[],["spriterenderargs",3]],[[],[["result",4],["wgpurenderererror",4]]],[[["image",3],["spriteinitargs",3]],[["result",4],["renderererror",4]]],[[["spriteinitargs",3],["image",3],["renderer",3]],[["result",4],["renderererror",4]]],[[["window",3]],[["result",4],["wgpurenderererror",4]]],null,[[],[["result",4],["renderererror",4]]],null,[[],[["renderererror",4],["result",4]]],[[],[["result",4],["renderererror",4]]],[[],[["result",4],["renderererror",4]]],[[["spriterenderargs",3]],[["result",4],["renderererror",4]]],[[["spriterenderargs",3],["str",15]],[["result",4],["renderererror",4]]],[[["vector2",3],["f32",15]],[["result",4],["renderererror",4]]],[[["spriterenderargs",3]],[["result",4],["renderererror",4]]],[[["spriterenderargs",3]],[["result",4],["renderererror",4]]],null,[[["columnmatrix4",3],["f32",15]],[["result",4],["renderererror",4]]],null,[[],[["option",4],["error",8]]],[[],["sprite",3]],[[["rect",3]]],[[["rect",3]]],null,[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[],[["vector2",3],["f32",15]]],[[],[["vector2",3],["f32",15]]],[[]],[[["f32",15]],["spriterenderargs",3]],[[["f32",15],["color",3]],["spriterenderargs",3]],[[["fnonce",8]],[["wgpurenderererror",4],["result",4]]],[[],[["wgpurenderererror",4],["result",4]]],[[["filtermode",4]]],[[["filtermode",4]],["spriteinitargs",3]],[[["fnonce",8]],[["wgpurenderererror",4],["result",4]]],[[],[["wgpurenderererror",4],["result",4]]],[[["image",3],["option",4]]],[[],["spriterenderargs",3]],[[],["spriterenderargs",3]],null,[[]],[[]],[[],["vertex",3]],[[]],null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],null,[[],["vertex",3]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null],"p":[[4,"WGPURendererError"],[4,"FilterMode"],[8,"CommonRenderer"],[4,"RendererError"],[3,"SpriteRenderArgs"],[8,"WGPUDevice"],[3,"WindowWGPUDevice"],[3,"WGPUDeviceInfo"],[3,"Renderer"],[3,"Sprite"],[3,"SpriteAtlasBuilder"],[3,"SpriteRenderTarget"],[3,"Renderable"],[3,"SpriteFont"],[3,"SpriteInitArgs"],[8,"RenderContext"],[8,"CommonSprite"],[3,"Vertex"]]},\
"riddle_time":{"doc":"Riddle crate supporting some basic game-centric time …","t":[3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,10,10],"n":["TimeSystem","TimeSystemHandle","TimeSystemWeak","TimerHandle","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cancel","clone","clone","clone_handle","clone_into","clone_into","clone_weak_handle","delta_secs","deref","downgrade","eq","ext","fps","frame_instant","from","from","from","from","into","into","into","into","new_shared","pending","process_frame","register_timer","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upgrade","TimeSystemExt","new_shared","process_frame"],"q":["riddle_time","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","riddle_time::ext","",""],"d":["The Riddle time system core state.","","","A handle to a timer created by […","","","","","","","","","Cancel a pending timer.","","","","","","","Get the current delta t as calculated based on previous …","","Downgrade this handle to a weak handle","Test whether two handles point to the same location in …","Types which are needed to use the time system independent …","Get the current FPS as calculated based on previous frame …","Get the reference time for this frame. Captured during […","","","","","","","","","","Check whether a timer has yet to fire.","","Register a timer with a callback which will be fired when …","","","","","","","","","","","","","","","Upgrade a weak handle to a strong handle. Returns None if …","","Create a new time system. The time the system is created …","Update the time system state, marking the beginning of a …"],"i":[0,0,0,0,1,2,3,4,1,2,3,4,2,3,4,1,3,4,1,1,3,3,3,0,1,1,1,2,3,4,1,2,3,4,1,2,1,1,3,4,1,2,3,4,1,2,3,4,1,2,3,4,4,0,5,5],"f":[null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["timesystemhandle",3]],[[],["timesystemweak",3]],[[],["timesystemhandle",3]],[[]],[[]],[[],["timesystemweak",3]],[[],["f32",15]],[[],["timesystem",3]],[[["timesystemhandle",3]],["timesystemweak",3]],[[["timesystemhandle",3]],["bool",15]],null,[[],["f32",15]],[[],["instant",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["timesystemhandle",3]],[[],["bool",15]],[[]],[[["duration",3]],["timerhandle",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["timesystemweak",3]],[["option",4],["timesystemhandle",3]]],null,[[],["timesystemhandle",3]],[[]]],"p":[[3,"TimeSystem"],[3,"TimerHandle"],[3,"TimeSystemHandle"],[3,"TimeSystemWeak"],[8,"TimeSystemExt"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};